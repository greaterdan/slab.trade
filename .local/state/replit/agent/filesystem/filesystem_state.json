{"file_contents":{"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/trading/BondingPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Info } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { motion } from \"framer-motion\";\n\ninterface BondingPanelProps {\n  symbol: string;\n  currentPrice: number;\n  creatorTax: number;\n  protocolTax: number;\n  seedVaultTax: number;\n  className?: string;\n}\n\nexport function BondingPanel({ \n  symbol, \n  currentPrice, \n  creatorTax, \n  protocolTax, \n  seedVaultTax,\n  className = \"\" \n}: BondingPanelProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [side, setSide] = useState<\"buy\" | \"sell\">(\"buy\");\n\n  const totalTax = creatorTax + protocolTax + seedVaultTax;\n  const estimatedOutput = amount ? parseFloat(amount) * currentPrice * (1 - totalTax / 100) : 0;\n\n  return (\n    <Card className={`p-4 ${className}`}>\n      <h3 className=\"text-lg font-semibold mb-4\">Bonding Curve</h3>\n\n      <Tabs value={side} onValueChange={(v) => setSide(v as \"buy\" | \"sell\")} className=\"mb-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"buy\" className=\"data-[state=active]:bg-success/20 data-[state=active]:text-success\" data-testid=\"tab-buy\">\n            Buy\n          </TabsTrigger>\n          <TabsTrigger value=\"sell\" className=\"data-[state=active]:bg-destructive/20 data-[state=active]:text-destructive\" data-testid=\"tab-sell\">\n            Sell\n          </TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"bonding-amount\" className=\"text-xs text-muted-foreground mb-2\">\n            Amount ({symbol})\n          </Label>\n          <Input\n            id=\"bonding-amount\"\n            type=\"number\"\n            placeholder=\"0.00\"\n            value={amount}\n            onChange={(e) => setAmount(e.target.value)}\n            className=\"font-mono text-lg h-12\"\n            data-testid=\"input-bonding-amount\"\n          />\n        </div>\n\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Current Price</span>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">${currentPrice.toFixed(4)}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-1\">\n              <span className=\"text-muted-foreground\">Total Tax</span>\n              <Tooltip>\n                <TooltipTrigger>\n                  <Info className=\"w-3 h-3 text-muted-foreground\" />\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <div className=\"text-xs space-y-1\">\n                    <div>Creator: {creatorTax}%</div>\n                    <div>Protocol: {protocolTax}%</div>\n                    <div>Seed Vault: {seedVaultTax}%</div>\n                  </div>\n                </TooltipContent>\n              </Tooltip>\n            </div>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">{totalTax.toFixed(2)}%</span>\n          </div>\n          <div className=\"flex justify-between pt-2 border-t border-border\">\n            <span className=\"font-medium\">You receive</span>\n            <span className=\"font-mono font-bold text-primary\" data-numeric=\"true\">\n              ${estimatedOutput.toFixed(2)}\n            </span>\n          </div>\n        </div>\n\n        <motion.div whileTap={{ scale: 0.98 }}>\n          <Button\n            className={`w-full h-11 font-semibold ${\n              side === \"buy\" \n                ? \"bg-success hover:bg-success/90 text-black\" \n                : \"bg-destructive hover:bg-destructive/90\"\n            }`}\n            disabled={!amount || parseFloat(amount) <= 0}\n            data-testid=\"button-bonding-submit\"\n          >\n            {side === \"buy\" ? \"Buy\" : \"Sell\"} {symbol}\n          </Button>\n        </motion.div>\n\n        <p className=\"text-xs text-muted-foreground text-center\">\n          Slippage may occur on larger trades\n        </p>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":4328},"server/storage.ts":{"content":"import { users, wallets, type User, type UpsertUser, type Wallet, type InsertWallet } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { WalletService } from \"./walletService\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Wallet operations\n  getUserWallet(userId: string): Promise<Wallet | undefined>;\n  createWallet(userId: string): Promise<Wallet>;\n  updateWalletBalance(walletId: string, balance: string): Promise<Wallet>;\n  \n  // Multi-wallet operations\n  getAllUserWallets(userId: string): Promise<Wallet[]>;\n  createAdditionalWallet(wallet: InsertWallet): Promise<Wallet>;\n  getWalletById(walletId: string): Promise<Wallet | undefined>;\n  updateWallet(walletId: string, updates: { name?: string; isArchived?: string }): Promise<Wallet>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Wallet operations\n  async getUserWallet(userId: string): Promise<Wallet | undefined> {\n    const [wallet] = await db.select().from(wallets).where(eq(wallets.userId, userId));\n    return wallet;\n  }\n\n  async createWallet(userId: string): Promise<Wallet> {\n    const { publicKey, encryptedPrivateKey } = WalletService.createWallet();\n    \n    const [wallet] = await db\n      .insert(wallets)\n      .values({\n        userId,\n        publicKey,\n        encryptedPrivateKey,\n        balance: \"0\",\n      })\n      .returning();\n    \n    return wallet;\n  }\n\n  async updateWalletBalance(walletId: string, balance: string): Promise<Wallet> {\n    const [wallet] = await db\n      .update(wallets)\n      .set({ balance, updatedAt: new Date() })\n      .where(eq(wallets.id, walletId))\n      .returning();\n    \n    return wallet;\n  }\n\n  // Multi-wallet operations\n  async getAllUserWallets(userId: string): Promise<Wallet[]> {\n    return await db.select().from(wallets).where(eq(wallets.userId, userId));\n  }\n\n  async createAdditionalWallet(wallet: InsertWallet): Promise<Wallet> {\n    const [newWallet] = await db\n      .insert(wallets)\n      .values(wallet)\n      .returning();\n    \n    return newWallet;\n  }\n\n  async getWalletById(walletId: string): Promise<Wallet | undefined> {\n    const [wallet] = await db.select().from(wallets).where(eq(wallets.id, walletId));\n    return wallet;\n  }\n\n  async updateWallet(walletId: string, updates: { name?: string; isArchived?: string }): Promise<Wallet> {\n    const [wallet] = await db\n      .update(wallets)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(wallets.id, walletId))\n      .returning();\n    \n    return wallet;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3197},"server/walletService.ts":{"content":"import { Keypair } from \"@solana/web3.js\";\nimport bs58 from \"bs58\";\nimport crypto from \"crypto\";\n\n// Fail fast if encryption key is missing\nif (!process.env.WALLET_ENCRYPTION_KEY) {\n  throw new Error(\"WALLET_ENCRYPTION_KEY environment variable is required for secure wallet storage\");\n}\n\nconst ENCRYPTION_KEY = process.env.WALLET_ENCRYPTION_KEY;\nconst ALGORITHM = \"aes-256-cbc\";\n\n/**\n * Wallet service for managing custodial Solana wallets\n */\nexport class WalletService {\n  /**\n   * Generate a new Solana keypair\n   */\n  static generateKeypair(): Keypair {\n    return Keypair.generate();\n  }\n\n  /**\n   * Encrypt a private key for secure storage\n   */\n  static encryptPrivateKey(privateKey: Uint8Array): string {\n    const key = crypto.createHash(\"sha256\").update(ENCRYPTION_KEY).digest();\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n    \n    const privateKeyBase58 = bs58.encode(privateKey);\n    let encrypted = cipher.update(privateKeyBase58, \"utf8\", \"hex\");\n    encrypted += cipher.final(\"hex\");\n    \n    return iv.toString(\"hex\") + \":\" + encrypted;\n  }\n\n  /**\n   * Decrypt a private key from storage\n   */\n  static decryptPrivateKey(encryptedData: string): Uint8Array {\n    const key = crypto.createHash(\"sha256\").update(ENCRYPTION_KEY).digest();\n    const parts = encryptedData.split(\":\");\n    const iv = Buffer.from(parts[0], \"hex\");\n    const encryptedText = parts[1];\n    \n    const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n    let decrypted = decipher.update(encryptedText, \"hex\", \"utf8\");\n    decrypted += decipher.final(\"utf8\");\n    \n    return bs58.decode(decrypted);\n  }\n\n  /**\n   * Create a new custodial wallet for a user\n   */\n  static createWallet(): {\n    publicKey: string;\n    encryptedPrivateKey: string;\n  } {\n    const keypair = this.generateKeypair();\n    const publicKey = keypair.publicKey.toBase58();\n    const encryptedPrivateKey = this.encryptPrivateKey(keypair.secretKey);\n    \n    return { publicKey, encryptedPrivateKey };\n  }\n\n  /**\n   * Export the private key in base58 format (for user to backup)\n   */\n  static exportPrivateKey(encryptedPrivateKey: string): string {\n    const privateKey = this.decryptPrivateKey(encryptedPrivateKey);\n    return bs58.encode(privateKey);\n  }\n\n  /**\n   * Get keypair from encrypted private key\n   */\n  static getKeypair(encryptedPrivateKey: string): Keypair {\n    const privateKey = this.decryptPrivateKey(encryptedPrivateKey);\n    return Keypair.fromSecretKey(privateKey);\n  }\n}\n","size_bytes":2520},"client/src/pages/Launch.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { PublicKey, Keypair } from \"@solana/web3.js\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ChevronLeft, ChevronRight, Check, Rocket, Loader2 } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { MarketTile } from \"@/components/shared/MarketTile\";\nimport type { LaunchFormData, BondingCurveType } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport * as percolator from \"@/percolator\";\nimport type { RiskParams, InstrumentConfig } from \"@/percolator/types\";\n\nconst steps = [\n  { number: 1, title: \"Basics\", subtitle: \"Name, symbol, image\" },\n  { number: 2, title: \"Bonding Curve\", subtitle: \"Type, price, taxes\" },\n  { number: 3, title: \"Graduation\", subtitle: \"Triggers for perps\" },\n  { number: 4, title: \"Perps Params\", subtitle: \"Trading parameters\" },\n  { number: 5, title: \"Fees & Deploy\", subtitle: \"Final review\" },\n];\n\nexport default function Launch() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isDeploying, setIsDeploying] = useState(false);\n  const [formData, setFormData] = useState<LaunchFormData>({\n    step: 1,\n    basics: { name: \"\", symbol: \"\", imageUrl: \"\" },\n    bondingCurve: { curveType: \"linear\", startPrice: 0.001, creatorTax: 2, protocolTax: 1, seedVaultTax: 2 },\n    graduationTriggers: { minLiquidity: 1000000, minHolders: 1000, minAgeHours: 72 },\n    perpsParams: { tickSize: 0.0001, lotSize: 1, maxLeverage: 20, initialMargin: 5, maintenanceMargin: 2.5, priceBandBps: 1000, fundingK: 0.0001, warmupHours: 24, warmupShortLevCap: 1 },\n    fees: { takerBps: 10, makerBps: -2, creatorFeePct: 30, referrerFeePct: 10 },\n  });\n\n  // Show authentication required message\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-6\">\n        <Card className=\"max-w-md w-full p-8 text-center\">\n          <Rocket className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-mono mb-2 text-foreground\">Authentication Required</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You need to be logged in to launch new markets.\n          </p>\n          <Button \n            onClick={() => window.location.href = \"/api/login\"}\n            className=\"w-full\"\n            data-testid=\"button-login-launch\"\n          >\n            Log In to Continue\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  const updateFormData = (section: keyof LaunchFormData, data: any) => {\n    setFormData(prev => ({ \n      ...prev, \n      [section]: { ...(prev[section] as object), ...data } \n    }));\n  };\n\n  const canProceed = () => {\n    if (currentStep === 1) return formData.basics.name && formData.basics.symbol;\n    return true;\n  };\n\n  const deployMarket = async () => {\n    if (!user?.wallet?.publicKey) {\n      toast({\n        title: \"Wallet Not Found\",\n        description: \"Please ensure you have a wallet connected\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsDeploying(true);\n\n    try {\n      // Generate new market ID\n      const marketKeypair = Keypair.generate();\n      const marketId = marketKeypair.publicKey;\n      \n      const userPubkey = new PublicKey(user.wallet.publicKey);\n      \n      // USDC mint (mainnet) - TODO: Make configurable\n      const quoteMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n      // Build risk parameters from form\n      const risk: RiskParams = {\n        initialMarginBps: Math.floor(formData.perpsParams.initialMargin * 100),\n        maintenanceMarginBps: Math.floor(formData.perpsParams.maintenanceMargin * 100),\n        bandBps: formData.perpsParams.priceBandBps,\n        fundingCapBps: Math.floor(formData.perpsParams.fundingK * 10000),\n        maxLeverage: formData.perpsParams.maxLeverage,\n        openInterestCap: percolator.toFixed(100000000), // 100M cap\n      };\n\n      // Build warmup config\n      const warmupEndMs = formData.perpsParams.warmupHours * 60 * 60 * 1000;\n      const warmupConfig = {\n        enabled: formData.perpsParams.warmupHours > 0,\n        shortEnabled: formData.perpsParams.warmupShortLevCap > 0,\n        shortLeverageCap: formData.perpsParams.warmupShortLevCap,\n        endTimestamp: Math.floor(Date.now() / 1000) + Math.floor(warmupEndMs / 1000),\n      };\n\n      // Build instrument config\n      const instrumentConfig: InstrumentConfig = {\n        symbol: formData.basics.symbol,\n        tickSize: percolator.toFixed(formData.perpsParams.tickSize),\n        lotSize: percolator.toFixed(formData.perpsParams.lotSize),\n        contractSize: percolator.toFixed(1), // 1x multiplier\n      };\n\n      toast({\n        title: \"Preparing Transactions...\",\n        description: \"Building market initialization transactions\",\n      });\n\n      // Step 1: Initialize slab (10MB account)\n      const slabTx = await percolator.slab.initSlab(\n        marketId,\n        userPubkey,\n        risk,\n        true, // anti-toxicity enabled\n        userPubkey\n      );\n\n      // Step 2: Create market (router)\n      const marketTx = await percolator.router.createMarket(\n        {\n          marketId,\n          authority: userPubkey,\n          quoteMint,\n          risk,\n          warmup: warmupConfig,\n        },\n        userPubkey\n      );\n\n      // Step 3: Add instrument\n      const instrumentTx = await percolator.slab.addInstrument(\n        marketId,\n        instrumentConfig,\n        userPubkey,\n        userPubkey\n      );\n\n      toast({\n        title: \"Transactions Ready\",\n        description: \"Ready to sign and submit to blockchain...\",\n      });\n\n      // TODO: Sign and send transactions\n      // This requires integrating with the custodial wallet service\n      // For now, show informative message\n      toast({\n        title: \"⚠️ Wallet Integration Required\",\n        description: \"Transaction signing is not yet implemented. The transactions have been prepared but need to be signed with your custodial wallet.\",\n        variant: \"destructive\",\n      });\n\n      console.log(\"Prepared transactions:\", {\n        marketId: marketId.toBase58(),\n        slabTx,\n        marketTx,\n        instrumentTx,\n      });\n\n    } catch (error) {\n      console.error(\"Market deployment failed:\", error);\n      toast({\n        title: \"Deployment Failed\",\n        description: error instanceof Error ? error.message : \"Unknown error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeploying(false);\n    }\n  };\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to launch a market. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Show nothing while checking auth or redirecting\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"text-lg text-muted-foreground\">Checking authentication...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 max-w-7xl mx-auto\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <h1 className=\"text-3xl font-bold mb-2 bg-gradient-to-r from-solana-mint to-solana-purple bg-clip-text text-transparent\">\n          Launch Your Market\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Create a perpetual market with custom bonding curve and parameters\n        </p>\n      </motion.div>\n\n      {/* Stepper */}\n      <Card className=\"p-6 border-card-border bg-card\">\n        <div className=\"flex items-center justify-between\">\n          {steps.map((step, index) => (\n            <div key={step.number} className=\"flex items-center flex-1\">\n              <div className=\"flex flex-col items-center flex-1\">\n                <motion.div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center font-bold border-2 transition-all ${\n                    currentStep === step.number\n                      ? \"bg-primary border-primary text-primary-foreground glow-mint\"\n                      : currentStep > step.number\n                      ? \"bg-success border-success text-black\"\n                      : \"bg-muted border-border text-muted-foreground\"\n                  }`}\n                  whileHover={{ scale: 1.05 }}\n                  data-testid={`step-${step.number}`}\n                >\n                  {currentStep > step.number ? <Check className=\"w-5 h-5\" /> : step.number}\n                </motion.div>\n                <div className=\"text-center mt-2 hidden sm:block\">\n                  <div className=\"text-xs font-semibold\">{step.title}</div>\n                  <div className=\"text-xs text-muted-foreground\">{step.subtitle}</div>\n                </div>\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`h-0.5 flex-1 transition-all ${currentStep > step.number ? \"bg-success\" : \"bg-border\"}`} />\n              )}\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Form - 2 cols */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"p-6 border-card-border bg-card min-h-[500px]\">\n            <AnimatePresence mode=\"wait\">\n              {/* Step 1: Basics */}\n              {currentStep === 1 && (\n                <motion.div\n                  key=\"step1\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">Market Basics</h2>\n                    <p className=\"text-sm text-muted-foreground\">Set up your market identity</p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"name\">Market Name</Label>\n                      <Input\n                        id=\"name\"\n                        placeholder=\"e.g., Bonk Inu\"\n                        value={formData.basics.name}\n                        onChange={(e) => updateFormData(\"basics\", { name: e.target.value })}\n                        className=\"mt-2\"\n                        data-testid=\"input-name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"symbol\">Symbol</Label>\n                      <Input\n                        id=\"symbol\"\n                        placeholder=\"e.g., BONK\"\n                        value={formData.basics.symbol}\n                        onChange={(e) => updateFormData(\"basics\", { symbol: e.target.value.toUpperCase() })}\n                        className=\"mt-2\"\n                        maxLength={10}\n                        data-testid=\"input-symbol\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"image\">Image URL (optional)</Label>\n                      <Input\n                        id=\"image\"\n                        type=\"url\"\n                        placeholder=\"https://...\"\n                        value={formData.basics.imageUrl}\n                        onChange={(e) => updateFormData(\"basics\", { imageUrl: e.target.value })}\n                        className=\"mt-2\"\n                        data-testid=\"input-image\"\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 2: Bonding Curve */}\n              {currentStep === 2 && (\n                <motion.div\n                  key=\"step2\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">Bonding Curve</h2>\n                    <p className=\"text-sm text-muted-foreground\">Configure price discovery mechanism</p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"curve-type\">Curve Type</Label>\n                      <Select\n                        value={formData.bondingCurve.curveType}\n                        onValueChange={(v) => updateFormData(\"bondingCurve\", { curveType: v as BondingCurveType })}\n                      >\n                        <SelectTrigger className=\"mt-2\" data-testid=\"select-curve-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"linear\">Linear</SelectItem>\n                          <SelectItem value=\"exponential\">Exponential</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"start-price\">Start Price ($)</Label>\n                      <Input\n                        id=\"start-price\"\n                        type=\"number\"\n                        step=\"0.000001\"\n                        value={formData.bondingCurve.startPrice}\n                        onChange={(e) => updateFormData(\"bondingCurve\", { startPrice: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-start-price\"\n                      />\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <div>\n                        <Label htmlFor=\"creator-tax\">Creator Tax (%)</Label>\n                        <Input\n                          id=\"creator-tax\"\n                          type=\"number\"\n                          value={formData.bondingCurve.creatorTax}\n                          onChange={(e) => updateFormData(\"bondingCurve\", { creatorTax: parseFloat(e.target.value) })}\n                          className=\"mt-2\"\n                          data-testid=\"input-creator-tax\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"protocol-tax\">Protocol Tax (%)</Label>\n                        <Input\n                          id=\"protocol-tax\"\n                          type=\"number\"\n                          value={formData.bondingCurve.protocolTax}\n                          onChange={(e) => updateFormData(\"bondingCurve\", { protocolTax: parseFloat(e.target.value) })}\n                          className=\"mt-2\"\n                          data-testid=\"input-protocol-tax\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"seed-vault-tax\">Seed Vault (%)</Label>\n                        <Input\n                          id=\"seed-vault-tax\"\n                          type=\"number\"\n                          value={formData.bondingCurve.seedVaultTax}\n                          onChange={(e) => updateFormData(\"bondingCurve\", { seedVaultTax: parseFloat(e.target.value) })}\n                          className=\"mt-2\"\n                          data-testid=\"input-seed-vault-tax\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"p-3 bg-muted/10 rounded-md border border-border\">\n                      <div className=\"text-sm font-medium mb-1\">Total Tax: {(formData.bondingCurve.creatorTax + formData.bondingCurve.protocolTax + formData.bondingCurve.seedVaultTax).toFixed(2)}%</div>\n                      <div className=\"text-xs text-muted-foreground\">Applied to each bonding curve transaction</div>\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 3: Graduation Triggers */}\n              {currentStep === 3 && (\n                <motion.div\n                  key=\"step3\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">Graduation Triggers</h2>\n                    <p className=\"text-sm text-muted-foreground\">When to transition from bonding to perpetuals</p>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"min-liquidity\">Minimum Liquidity ($)</Label>\n                      <Input\n                        id=\"min-liquidity\"\n                        type=\"number\"\n                        value={formData.graduationTriggers.minLiquidity}\n                        onChange={(e) => updateFormData(\"graduationTriggers\", { minLiquidity: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-min-liquidity\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"min-holders\">Minimum Holders</Label>\n                      <Input\n                        id=\"min-holders\"\n                        type=\"number\"\n                        value={formData.graduationTriggers.minHolders}\n                        onChange={(e) => updateFormData(\"graduationTriggers\", { minHolders: parseInt(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-min-holders\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"min-age\">Minimum Age (hours)</Label>\n                      <Input\n                        id=\"min-age\"\n                        type=\"number\"\n                        value={formData.graduationTriggers.minAgeHours}\n                        onChange={(e) => updateFormData(\"graduationTriggers\", { minAgeHours: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-min-age\"\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 4: Perps Parameters */}\n              {currentStep === 4 && (\n                <motion.div\n                  key=\"step4\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">Perpetuals Parameters</h2>\n                    <p className=\"text-sm text-muted-foreground\">Advanced trading configuration</p>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"tick-size\">Tick Size</Label>\n                      <Input\n                        id=\"tick-size\"\n                        type=\"number\"\n                        step=\"0.0001\"\n                        value={formData.perpsParams.tickSize}\n                        onChange={(e) => updateFormData(\"perpsParams\", { tickSize: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-tick-size\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lot-size\">Lot Size</Label>\n                      <Input\n                        id=\"lot-size\"\n                        type=\"number\"\n                        value={formData.perpsParams.lotSize}\n                        onChange={(e) => updateFormData(\"perpsParams\", { lotSize: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-lot-size\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"max-leverage\">Max Leverage</Label>\n                      <Input\n                        id=\"max-leverage\"\n                        type=\"number\"\n                        value={formData.perpsParams.maxLeverage}\n                        onChange={(e) => updateFormData(\"perpsParams\", { maxLeverage: parseInt(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-max-leverage\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"warmup-hours\">Warmup Hours</Label>\n                      <Input\n                        id=\"warmup-hours\"\n                        type=\"number\"\n                        value={formData.perpsParams.warmupHours}\n                        onChange={(e) => updateFormData(\"perpsParams\", { warmupHours: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-warmup-hours\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"warmup-short-lev\">Warmup Short Lev Cap</Label>\n                      <Input\n                        id=\"warmup-short-lev\"\n                        type=\"number\"\n                        value={formData.perpsParams.warmupShortLevCap}\n                        onChange={(e) => updateFormData(\"perpsParams\", { warmupShortLevCap: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-warmup-short-lev\"\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n\n              {/* Step 5: Fees & Deploy */}\n              {currentStep === 5 && (\n                <motion.div\n                  key=\"step5\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"space-y-6\"\n                >\n                  <div>\n                    <h2 className=\"text-2xl font-bold mb-2\">Fees & Final Review</h2>\n                    <p className=\"text-sm text-muted-foreground\">Trading fees and deployment</p>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"taker-bps\">Taker Fee (bps)</Label>\n                      <Input\n                        id=\"taker-bps\"\n                        type=\"number\"\n                        value={formData.fees.takerBps}\n                        onChange={(e) => updateFormData(\"fees\", { takerBps: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-taker-bps\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"maker-bps\">Maker Fee (bps)</Label>\n                      <Input\n                        id=\"maker-bps\"\n                        type=\"number\"\n                        value={formData.fees.makerBps}\n                        onChange={(e) => updateFormData(\"fees\", { makerBps: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-maker-bps\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"creator-fee\">Creator Fee %</Label>\n                      <Input\n                        id=\"creator-fee\"\n                        type=\"number\"\n                        value={formData.fees.creatorFeePct}\n                        onChange={(e) => updateFormData(\"fees\", { creatorFeePct: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-creator-fee\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"referrer-fee\">Referrer Fee %</Label>\n                      <Input\n                        id=\"referrer-fee\"\n                        type=\"number\"\n                        value={formData.fees.referrerFeePct}\n                        onChange={(e) => updateFormData(\"fees\", { referrerFeePct: parseFloat(e.target.value) })}\n                        className=\"mt-2\"\n                        data-testid=\"input-referrer-fee\"\n                      />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"p-4 bg-destructive/10 border border-destructive/30 rounded-md\">\n                    <h3 className=\"font-semibold text-destructive mb-2\">⚠️ Ready to Deploy</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Review all parameters carefully. Deployment is irreversible and will require wallet signature.\n                    </p>\n                    <Button\n                      className=\"w-full bg-destructive hover:bg-destructive/90 text-destructive-foreground font-bold\"\n                      size=\"lg\"\n                      onClick={deployMarket}\n                      disabled={isDeploying}\n                      data-testid=\"button-deploy\"\n                    >\n                      {isDeploying ? (\n                        <>\n                          <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                          Deploying...\n                        </>\n                      ) : (\n                        <>\n                          <Rocket className=\"w-5 h-5 mr-2\" />\n                          Deploy Market\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Navigation */}\n            <div className=\"flex items-center justify-between mt-8 pt-6 border-t border-border\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setCurrentStep(prev => Math.max(1, prev - 1))}\n                disabled={currentStep === 1}\n                data-testid=\"button-prev-step\"\n              >\n                <ChevronLeft className=\"w-4 h-4 mr-2\" />\n                Previous\n              </Button>\n              <div className=\"text-sm text-muted-foreground\">\n                Step {currentStep} of {steps.length}\n              </div>\n              <Button\n                onClick={() => setCurrentStep(prev => Math.min(5, prev + 1))}\n                disabled={currentStep === 5 || !canProceed()}\n                data-testid=\"button-next-step\"\n              >\n                Next\n                <ChevronRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </Card>\n        </div>\n\n        {/* Live Summary - 1 col */}\n        <div>\n          <Card className=\"p-6 border-card-border bg-card sticky top-24\">\n            <h3 className=\"text-lg font-semibold mb-4\">Live Preview</h3>\n\n            {formData.basics.symbol ? (\n              <div className=\"space-y-4\">\n                <div className=\"aspect-square w-full rounded-md bg-gradient-to-br from-solana-purple to-solana-mint flex items-center justify-center\">\n                  <span className=\"text-4xl font-bold text-black\">{formData.basics.symbol.slice(0, 2)}</span>\n                </div>\n\n                <div>\n                  <h4 className=\"font-bold text-lg\">{formData.basics.symbol}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{formData.basics.name || \"Your market name\"}</p>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-3 text-sm\">\n                  <div>\n                    <Badge variant=\"outline\" className=\"mb-2\">Status Timeline</Badge>\n                    <div className=\"flex items-center gap-2 text-xs\">\n                      <div className=\"flex-1 h-1 bg-solana-purple rounded\" />\n                      <span className=\"text-solana-purple\">Bonding</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs mt-1\">\n                      <div className=\"flex-1 h-1 bg-solana-aqua rounded\" />\n                      <span className=\"text-solana-aqua\">Warmup</span>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs mt-1\">\n                      <div className=\"flex-1 h-1 bg-solana-mint rounded\" />\n                      <span className=\"text-solana-mint\">Perps</span>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Start Price</span>\n                      <span className=\"font-mono font-medium\" data-numeric=\"true\">${formData.bondingCurve.startPrice}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Total Tax</span>\n                      <span className=\"font-mono font-medium\" data-numeric=\"true\">\n                        {(formData.bondingCurve.creatorTax + formData.bondingCurve.protocolTax + formData.bondingCurve.seedVaultTax).toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Max Leverage</span>\n                      <span className=\"font-mono font-medium\" data-numeric=\"true\">{formData.perpsParams.maxLeverage}x</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Est. Deployment</span>\n                      <span className=\"font-mono font-medium text-success\" data-numeric=\"true\">~0.05 SOL</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Fill in market details to see preview\n                </p>\n              </div>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31797},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"replit.md":{"content":"# SLAB - Solana Launchpad & Bonding Markets\n\n## Overview\n\nSLAB is a decentralized exchange (DEX) platform on Solana for launching and trading perpetual markets utilizing bonding curves. It enables creators to initiate new markets that progress through distinct phases: Bonding (initial price discovery), Warmup (transition), and Perps (full perpetual futures trading). The platform offers a sophisticated trading interface with real-time market data, order books, and comprehensive market management tools, inspired by professional trading platforms.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:** React 18 (TypeScript), Vite, Wouter (routing), TanStack Query (server state), Zustand (client state), Framer Motion, Tailwind CSS (warm beige & white theme).\n\n**UI Component System:** `shadcn/ui` (Radix UI primitives) with warm beige & white design system featuring black text, light backgrounds (#FAF8F5, #FFFFFF), and warm accent colors (amber #D97706, teal #059669, purple #7C3AED).\n\n**State Management:** Three primary Zustand stores (`useMarketsStore`, `useLaunchStore`, `useTradeStore`) for domain-specific client-side state, complemented by React Query for server-side data fetching and caching.\n\n**Page Structure:** Includes Dashboard, Launch (multi-step market creation wizard), Market Detail (trading interface), Discover, Portfolio (multi-wallet management), and Creator (analytics).\n\n### Backend Architecture\n\n**Server Framework:** Express.js with TypeScript, integrated with Vite for development, and a PostgreSQL database utilizing Drizzle ORM.\n\n**Authentication & Authorization:** Leverages Replit Auth for multi-provider OAuth, with Express sessions backed by PostgreSQL. Features protected routes for market creation and creator analytics.\n\n**Custodial Wallet System:** Supports multiple named Solana wallets per user, with automatic primary wallet generation on first login. Private keys are AES-256-CBC encrypted and stored in PostgreSQL. Users can securely export private keys.\n\n**Storage Architecture:** PostgreSQL via `@neondatabase/serverless` and Drizzle ORM. Key tables include `users`, `sessions`, and `wallets` (encrypted Solana keypairs).\n\n**API Endpoints:** RESTful API (`/api/*`) for user authentication, multi-wallet management (list, create, update, balance, export key), and market interactions.\n\n### Data Layer Design\n\n**Schema Architecture:** Centralized TypeScript schema definitions in `shared/schema.ts` defining market lifecycle (`bonding` → `warmup` → `perps`), bonding curve parameters, graduation triggers, perpetuals configuration, and fee structures.\n\n**Database Schema:** `users` table for authentication, `sessions` for Express sessions, and `wallets` for custodial Solana wallets (including encrypted private keys, balances, and archive status).\n\n### Trading Interface Components\n\n**Market Phases:** UI dynamically adapts for Bonding, Warmup, and Perps phases, offering specific trading panels (e.g., bonding curve, perpetual futures ticket with leverage).\n\n**Order Book & Trades:** Real-time order book visualization with bid/ask depth and live trades feed.\n\n**Chart Integration:** Placeholder `MiniCandleCanvas` prepared for integration with advanced charting libraries.\n\n### Styling and Theming\n\n**Color System:** Light beige/white theme with warm backgrounds (#FAF8F5, #FFFFFF), black text (#1A1816), and warm accent colors (amber, teal, purple) for actions and status indicators.\n\n**Tailwind Configuration:** Custom properties for theme colors, border radii, and elevation utilities.\n\n**Typography:** Inter font for UI, JetBrains Mono for numerical data.\n\n## External Dependencies\n\n### UI Framework & Components\n- **Radix UI** and **shadcn/ui**\n- **Tailwind CSS**\n- **Framer Motion**\n\n### State Management & Data Fetching\n- **TanStack Query v5**\n- **Zustand**\n- **React Hook Form**\n- **Zod**\n\n### Routing & Navigation\n- **Wouter**\n\n### Development Tools\n- **Vite**, **TypeScript**, **esbuild**, **tsx**\n\n### Backend & Database\n- **Drizzle ORM**\n- **@neondatabase/serverless**\n- **connect-pg-simple**\n\n### Blockchain & Wallet\n- **@solana/web3.js**\n- **bs58**\n- **Node crypto** (for AES-256-CBC encryption)\n\n### Utility Libraries\n- **date-fns**\n- **nanoid**\n- **clsx & tailwind-merge**\n\n### Platform Integration\n- **Replit Vite Plugins**\n\n## Recent Changes\n\n### October 21, 2025 - Color Scheme Redesign\n- Complete visual redesign from dark terminal theme to warm beige/white aesthetic\n- Updated color palette:\n  - Backgrounds: Soft warm white (#FAF8F5), pure white cards (#FFFFFF)\n  - Text: Almost black (#1A1816) with excellent contrast for accessibility\n  - Accent colors: Warm amber (#D97706), teal green (#059669), purple (#7C3AED)\n- Updated design_guidelines.md with new color system specifications\n- Replaced all CSS variables in index.css with light theme values\n- Verified WCAG AA contrast standards (11:1 for primary text)\n- All pages tested and confirmed working with new color scheme","size_bytes":5053},"client/src/stores/useTradeStore.ts":{"content":"import { create } from \"zustand\";\nimport type { Position } from \"@shared/schema\";\n\ninterface TradeState {\n  positions: Position[];\n  pendingOrders: any[];\n  balances: Record<string, number>;\n  \n  addPosition: (position: Position) => void;\n  closePosition: (positionId: string) => void;\n  updatePosition: (positionId: string, updates: Partial<Position>) => void;\n  setBalance: (asset: string, amount: number) => void;\n}\n\nexport const useTradeStore = create<TradeState>((set) => ({\n  positions: [],\n  pendingOrders: [],\n  balances: {\n    SOL: 10.5,\n    USDC: 5000,\n  },\n\n  addPosition: (position) => {\n    set((state) => ({\n      positions: [...state.positions, position],\n    }));\n  },\n\n  closePosition: (positionId) => {\n    set((state) => ({\n      positions: state.positions.filter(p => p.id !== positionId),\n    }));\n  },\n\n  updatePosition: (positionId, updates) => {\n    set((state) => ({\n      positions: state.positions.map(p =>\n        p.id === positionId ? { ...p, ...updates } : p\n      ),\n    }));\n  },\n\n  setBalance: (asset, amount) => {\n    set((state) => ({\n      balances: { ...state.balances, [asset]: amount },\n    }));\n  },\n}));\n","size_bytes":1145},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\",\n        md: \".375rem\",\n        sm: \".1875rem\",\n      },\n      colors: {\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        solana: {\n          purple: \"#9945FF\",\n          mint: \"#14F195\",\n          aqua: \"#00FFA3\",\n        },\n        info: \"#37A6FF\",\n        success: \"#1ED660\",\n        warning: \"#F6C86E\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      transitionDuration: {\n        \"150\": \"150ms\",\n        \"200\": \"200ms\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4250},"client/src/components/shared/OrderBook.tsx":{"content":"import { OrderBookEntry } from \"@shared/schema\";\nimport { motion } from \"framer-motion\";\n\ninterface OrderBookProps {\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n  className?: string;\n}\n\nexport function OrderBook({ bids, asks, className = \"\" }: OrderBookProps) {\n  const formatPrice = (price: number) => price.toFixed(4);\n  const formatSize = (size: number) => size.toFixed(2);\n\n  const renderRow = (entry: OrderBookEntry, type: \"bid\" | \"ask\", index: number) => {\n    const percentage = (entry.size / entry.total) * 100;\n    const bgColor = type === \"bid\" ? \"bg-success/10\" : \"bg-destructive/10\";\n    \n    return (\n      <motion.div\n        key={`${type}-${index}`}\n        className=\"relative grid grid-cols-3 gap-2 px-3 py-1 hover-elevate cursor-pointer\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: index * 0.02 }}\n        data-testid={`orderbook-${type}-${index}`}\n      >\n        <div\n          className={`absolute inset-y-0 ${type === \"bid\" ? \"left-0\" : \"right-0\"} ${bgColor}`}\n          style={{ width: `${percentage}%` }}\n        />\n        <div className={`relative font-mono text-sm ${type === \"bid\" ? \"text-success\" : \"text-destructive\"}`} data-numeric=\"true\">\n          {formatPrice(entry.price)}\n        </div>\n        <div className=\"relative font-mono text-sm text-right\" data-numeric=\"true\">\n          {formatSize(entry.size)}\n        </div>\n        <div className=\"relative font-mono text-sm text-right text-muted-foreground\" data-numeric=\"true\">\n          {formatSize(entry.total)}\n        </div>\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"grid grid-cols-3 gap-2 px-3 py-2 text-xs text-muted-foreground uppercase tracking-wide border-b border-border\">\n        <div>Price</div>\n        <div className=\"text-right\">Size</div>\n        <div className=\"text-right\">Total</div>\n      </div>\n\n      {/* Asks (reversed to show lowest at bottom) */}\n      <div className=\"flex flex-col-reverse\">\n        {asks.slice(0, 8).map((ask, i) => renderRow(ask, \"ask\", i))}\n      </div>\n\n      {/* Spread */}\n      <div className=\"px-3 py-2 bg-muted/20 border-y border-border\">\n        <div className=\"flex items-center justify-between text-xs\">\n          <span className=\"text-muted-foreground\">Spread</span>\n          <span className=\"font-mono font-medium\" data-numeric=\"true\">\n            {asks[0] && bids[0] ? (asks[0].price - bids[0].price).toFixed(4) : \"—\"}\n          </span>\n        </div>\n      </div>\n\n      {/* Bids */}\n      <div>\n        {bids.slice(0, 8).map((bid, i) => renderRow(bid, \"bid\", i))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2663},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/shared/ProgressRing.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface ProgressRingProps {\n  progress: number;\n  size?: number;\n  strokeWidth?: number;\n  className?: string;\n  showLabel?: boolean;\n}\n\nexport function ProgressRing({ \n  progress, \n  size = 60, \n  strokeWidth = 4, \n  className = \"\",\n  showLabel = true \n}: ProgressRingProps) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const offset = circumference - (progress / 100) * circumference;\n\n  const getColor = () => {\n    if (progress >= 90) return \"#14F195\";\n    if (progress >= 50) return \"#00FFA3\";\n    return \"#9945FF\";\n  };\n\n  return (\n    <div className={`relative ${className}`} style={{ width: size, height: size }}>\n      <svg width={size} height={size} className=\"transform -rotate-90\">\n        {/* Background circle */}\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"hsl(var(--muted))\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n        />\n        {/* Progress circle */}\n        <motion.circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke={getColor()}\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          strokeDasharray={circumference}\n          strokeDashoffset={offset}\n          initial={{ strokeDashoffset: circumference }}\n          animate={{ strokeDashoffset: offset }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          style={{\n            filter: `drop-shadow(0 0 4px ${getColor()}40)`,\n          }}\n        />\n      </svg>\n      {showLabel && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <span className=\"text-xs font-bold font-mono\" data-numeric=\"true\">\n            {Math.round(progress)}%\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1881},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { TopBar } from \"@/components/layout/TopBar\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Launch from \"@/pages/Launch\";\nimport Market from \"@/pages/Market\";\nimport Discover from \"@/pages/Discover\";\nimport Creator from \"@/pages/Creator\";\nimport Portfolio from \"@/pages/Portfolio\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/launch\" component={Launch} />\n      <Route path=\"/market/:symbol\" component={Market} />\n      <Route path=\"/discover\" component={Discover} />\n      <Route path=\"/creator\" component={Creator} />\n      <Route path=\"/portfolio\" component={Portfolio} />\n      <Route path=\"/markets\" component={Discover} />\n      <Route path=\"/docs\">\n        {() => (\n          <div className=\"flex flex-col items-center justify-center min-h-[60vh]\">\n            <h1 className=\"text-3xl font-bold mb-4\">Documentation</h1>\n            <p className=\"text-muted-foreground mb-6\">Coming soon...</p>\n            <a\n              href=\"https://docs.slab.markets\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-primary hover:underline\"\n            >\n              External docs →\n            </a>\n          </div>\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"flex flex-col h-screen w-full\">\n          <TopBar />\n          <main className=\"flex-1 overflow-auto\">\n            <Router />\n          </main>\n          <footer className=\"h-8 bg-card/80 backdrop-blur-sm border-t border-border flex items-center justify-center text-xs text-muted-foreground px-4\">\n            <p>\n              Trading perpetuals involves risk. DYOR. Not financial advice. Alpha software.\n            </p>\n          </footer>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2308},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/shared/StatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { MarketStatus } from \"@shared/schema\";\n\ninterface StatusBadgeProps {\n  status: MarketStatus;\n  className?: string;\n}\n\nexport function StatusBadge({ status, className = \"\" }: StatusBadgeProps) {\n  const getStatusConfig = () => {\n    switch (status) {\n      case \"bonding\":\n        return {\n          label: \"BONDING\",\n          className: \"bg-transparent text-warning border-warning/30\",\n        };\n      case \"warmup\":\n        return {\n          label: \"WARMUP\",\n          className: \"bg-transparent text-secondary border-secondary/30\",\n        };\n      case \"perps\":\n        return {\n          label: \"LIVE\",\n          className: \"bg-transparent text-primary border-primary/30\",\n        };\n    }\n  };\n\n  const config = getStatusConfig();\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className={`${config.className} ${className} font-mono text-[10px] tracking-wider px-2`}\n      data-testid={`badge-status-${status}`}\n    >\n      [{config.label}]\n    </Badge>\n  );\n}\n","size_bytes":1030},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// ============================================================================\n// AUTHENTICATION & WALLET TABLES (Replit Auth + Custodial Wallets)\n// ============================================================================\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User storage table - Required for Replit Auth\n// IMPORTANT: Keeps default config for id column per Replit Auth blueprint\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\n\n// Wallets table - Custodial Solana wallets for each user (supports multiple wallets)\nexport const wallets = pgTable(\"wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\").notNull().default(\"Main Wallet\"), // User-defined wallet name\n  publicKey: varchar(\"public_key\").notNull().unique(),\n  encryptedPrivateKey: text(\"encrypted_private_key\").notNull(), // Encrypted with app secret\n  balance: decimal(\"balance\", { precision: 18, scale: 9 }).notNull().default(\"0\"), // SOL balance\n  isPrimary: varchar(\"is_primary\").notNull().default(\"false\"), // Primary wallet for user\n  isArchived: varchar(\"is_archived\").notNull().default(\"false\"), // Archived/hidden from main view\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type Wallet = typeof wallets.$inferSelect;\nexport type InsertWallet = typeof wallets.$inferInsert;\n\n// Zod schemas for wallet operations\nexport const createWalletSchema = z.object({\n  name: z.string().min(1).max(50),\n});\n\nexport const updateWalletSchema = z.object({\n  name: z.string().min(1).max(50).optional(),\n  isArchived: z.string().optional(),\n});\n\n// ============================================================================\n// TRADING TYPES (unchanged)\n// ============================================================================\n\nexport type MarketStatus = \"bonding\" | \"warmup\" | \"perps\";\n\nexport type BondingCurveType = \"linear\" | \"exponential\";\n\nexport interface Market {\n  id: string;\n  symbol: string;\n  name: string;\n  imageUrl?: string;\n  status: MarketStatus;\n  createdAt: number;\n  creatorAddress: string;\n  \n  bondingConfig: {\n    curveType: BondingCurveType;\n    startPrice: number;\n    creatorTax: number;\n    protocolTax: number;\n    seedVaultTax: number;\n  };\n  \n  graduationTriggers: {\n    minLiquidity: number;\n    minHolders: number;\n    minAgeHours: number;\n  };\n  \n  perpsConfig: {\n    tickSize: number;\n    lotSize: number;\n    maxLeverage: number;\n    initialMargin: number;\n    maintenanceMargin: number;\n    priceBandBps: number;\n    fundingK: number;\n    warmupHours: number;\n    warmupShortLevCap: number;\n  };\n  \n  fees: {\n    takerBps: number;\n    makerBps: number;\n    creatorFeePct: number;\n    referrerFeePct: number;\n  };\n  \n  metrics: {\n    currentPrice: number;\n    priceChange24h: number;\n    volume24h: number;\n    openInterest: number;\n    liquidity: number;\n    holders: number;\n    ageHours: number;\n    graduationProgress: number;\n    fundingRate?: number;\n  };\n}\n\nexport interface Trade {\n  id: string;\n  marketId: string;\n  symbol: string;\n  timestamp: number;\n  price: number;\n  size: number;\n  side: \"buy\" | \"sell\";\n}\n\nexport interface OrderBookEntry {\n  price: number;\n  size: number;\n  total: number;\n}\n\nexport interface OrderBook {\n  marketId: string;\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n  lastUpdate: number;\n}\n\nexport interface Position {\n  id: string;\n  marketId: string;\n  symbol: string;\n  side: \"long\" | \"short\";\n  size: number;\n  entryPrice: number;\n  currentPrice: number;\n  leverage: number;\n  margin: number;\n  pnl: number;\n  pnlPct: number;\n  liquidationPrice: number;\n}\n\nexport interface LaunchFormData {\n  step: number;\n  \n  basics: {\n    name: string;\n    symbol: string;\n    imageUrl?: string;\n  };\n  \n  bondingCurve: {\n    curveType: BondingCurveType;\n    startPrice: number;\n    creatorTax: number;\n    protocolTax: number;\n    seedVaultTax: number;\n  };\n  \n  graduationTriggers: {\n    minLiquidity: number;\n    minHolders: number;\n    minAgeHours: number;\n  };\n  \n  perpsParams: {\n    tickSize: number;\n    lotSize: number;\n    maxLeverage: number;\n    initialMargin: number;\n    maintenanceMargin: number;\n    priceBandBps: number;\n    fundingK: number;\n    warmupHours: number;\n    warmupShortLevCap: number;\n  };\n  \n  fees: {\n    takerBps: number;\n    makerBps: number;\n    creatorFeePct: number;\n    referrerFeePct: number;\n  };\n}\n\nexport interface CreatorStats {\n  address: string;\n  totalEarnings: number;\n  totalVolume: number;\n  marketsCreated: number;\n  referralCode: string;\n  referralEarnings: number;\n  markets: Market[];\n}\n\nexport const launchFormSchema = z.object({\n  step: z.number().min(1).max(5),\n  basics: z.object({\n    name: z.string().min(1).max(50),\n    symbol: z.string().min(1).max(10).toUpperCase(),\n    imageUrl: z.string().optional(),\n  }),\n  bondingCurve: z.object({\n    curveType: z.enum([\"linear\", \"exponential\"]),\n    startPrice: z.number().positive(),\n    creatorTax: z.number().min(0).max(100),\n    protocolTax: z.number().min(0).max(100),\n    seedVaultTax: z.number().min(0).max(100),\n  }),\n  graduationTriggers: z.object({\n    minLiquidity: z.number().positive(),\n    minHolders: z.number().int().positive(),\n    minAgeHours: z.number().positive(),\n  }),\n  perpsParams: z.object({\n    tickSize: z.number().positive(),\n    lotSize: z.number().positive(),\n    maxLeverage: z.number().min(1).max(100),\n    initialMargin: z.number().min(0).max(100),\n    maintenanceMargin: z.number().min(0).max(100),\n    priceBandBps: z.number().positive(),\n    fundingK: z.number(),\n    warmupHours: z.number().positive(),\n    warmupShortLevCap: z.number().min(1).max(10),\n  }),\n  fees: z.object({\n    takerBps: z.number().min(0),\n    makerBps: z.number(),\n    creatorFeePct: z.number().min(0).max(100),\n    referrerFeePct: z.number().min(0).max(100),\n  }),\n});\n","size_bytes":6825},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/stores/useLaunchStore.ts":{"content":"import { create } from \"zustand\";\nimport type { LaunchFormData } from \"@shared/schema\";\n\ninterface LaunchState {\n  formData: LaunchFormData;\n  currentStep: number;\n  isDeploying: boolean;\n  deploymentTx: string | null;\n  \n  updateFormData: <K extends keyof LaunchFormData>(\n    section: K,\n    data: Partial<LaunchFormData[K]>\n  ) => void;\n  setCurrentStep: (step: number) => void;\n  resetForm: () => void;\n  deployMarket: () => Promise<void>;\n}\n\nconst initialFormData: LaunchFormData = {\n  step: 1,\n  basics: { name: \"\", symbol: \"\", imageUrl: \"\" },\n  bondingCurve: {\n    curveType: \"linear\",\n    startPrice: 0.001,\n    creatorTax: 2,\n    protocolTax: 1,\n    seedVaultTax: 2,\n  },\n  graduationTriggers: {\n    minLiquidity: 1000000,\n    minHolders: 1000,\n    minAgeHours: 72,\n  },\n  perpsParams: {\n    tickSize: 0.0001,\n    lotSize: 1,\n    maxLeverage: 20,\n    initialMargin: 5,\n    maintenanceMargin: 2.5,\n    priceBandBps: 1000,\n    fundingK: 0.0001,\n    warmupHours: 24,\n    warmupShortLevCap: 1,\n  },\n  fees: {\n    takerBps: 10,\n    makerBps: -2,\n    creatorFeePct: 30,\n    referrerFeePct: 10,\n  },\n};\n\nexport const useLaunchStore = create<LaunchState>((set, get) => ({\n  formData: initialFormData,\n  currentStep: 1,\n  isDeploying: false,\n  deploymentTx: null,\n\n  updateFormData: (section, data) => {\n    set((state) => ({\n      formData: {\n        ...state.formData,\n        [section]: { ...state.formData[section], ...data },\n      },\n    }));\n  },\n\n  setCurrentStep: (step) => {\n    set({ currentStep: step });\n  },\n\n  resetForm: () => {\n    set({\n      formData: initialFormData,\n      currentStep: 1,\n      isDeploying: false,\n      deploymentTx: null,\n    });\n  },\n\n  deployMarket: async () => {\n    set({ isDeploying: true });\n    \n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const mockTx = `0x${Math.random().toString(16).slice(2)}`;\n    set({ isDeploying: false, deploymentTx: mockTx });\n  },\n}));\n","size_bytes":1936},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/shared/MarketTile.tsx":{"content":"import { Market } from \"@shared/schema\";\nimport { Card } from \"@/components/ui/card\";\nimport { StatusBadge } from \"./StatusBadge\";\nimport { ProgressRing } from \"./ProgressRing\";\nimport { TrendingUp, TrendingDown, Users, Droplet } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\n\ninterface MarketTileProps {\n  market: Market;\n  className?: string;\n}\n\nexport function MarketTile({ market, className = \"\" }: MarketTileProps) {\n  const formatNumber = (num: number, decimals = 2) => {\n    if (num >= 1e9) return `$${(num / 1e9).toFixed(decimals)}B`;\n    if (num >= 1e6) return `$${(num / 1e6).toFixed(decimals)}M`;\n    if (num >= 1e3) return `$${(num / 1e3).toFixed(decimals)}K`;\n    return `$${num.toFixed(decimals)}`;\n  };\n\n  const isPriceUp = market.metrics.priceChange24h >= 0;\n\n  return (\n    <Link href={`/market/${market.symbol}`}>\n      <motion.div\n        whileHover={{ y: -2 }}\n        transition={{ duration: 0.15 }}\n        className={className}\n      >\n        <Card className=\"p-4 hover-elevate active-elevate-2 cursor-pointer border border-card-border bg-card\" data-testid={`card-market-${market.symbol}`}>\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex items-center gap-3\">\n              {market.imageUrl ? (\n                <img src={market.imageUrl} alt={market.symbol} className=\"w-10 h-10 rounded-md\" />\n              ) : (\n                <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-solana-purple to-solana-mint flex items-center justify-center text-sm font-bold\">\n                  {market.symbol.slice(0, 2)}\n                </div>\n              )}\n              <div>\n                <h3 className=\"font-bold text-sm\">{market.symbol}</h3>\n                <p className=\"text-xs text-muted-foreground\">{market.name}</p>\n              </div>\n            </div>\n            <StatusBadge status={market.status} />\n          </div>\n\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <div className=\"text-xl font-bold font-mono\" data-numeric=\"true\">\n                {formatNumber(market.metrics.currentPrice)}\n              </div>\n              <div className={`flex items-center gap-1 text-sm font-medium ${isPriceUp ? \"text-success\" : \"text-destructive\"}`}>\n                {isPriceUp ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                {isPriceUp ? \"+\" : \"\"}{market.metrics.priceChange24h.toFixed(2)}%\n              </div>\n            </div>\n            <ProgressRing progress={market.metrics.graduationProgress} size={50} strokeWidth={3} />\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-2 pt-3 border-t border-border\">\n            <div>\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-1\">\n                <Droplet className=\"w-3 h-3\" />\n                <span>Vol 24h</span>\n              </div>\n              <div className=\"text-xs font-medium font-mono\" data-numeric=\"true\">\n                {formatNumber(market.metrics.volume24h)}\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-1\">\n                <TrendingUp className=\"w-3 h-3\" />\n                <span>OI</span>\n              </div>\n              <div className=\"text-xs font-medium font-mono\" data-numeric=\"true\">\n                {formatNumber(market.metrics.openInterest)}\n              </div>\n            </div>\n            <div>\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-1\">\n                <Users className=\"w-3 h-3\" />\n                <span>Holders</span>\n              </div>\n              <div className=\"text-xs font-medium font-mono\" data-numeric=\"true\">\n                {market.metrics.holders}\n              </div>\n            </div>\n          </div>\n        </Card>\n      </motion.div>\n    </Link>\n  );\n}\n","size_bytes":3993},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"design_guidelines.md":{"content":"# SLAB Design Guidelines\n\n## Color System (Warm Beige & White UI)\n\n**Core Neutrals**\n- Page Background: #FAF8F5 (Soft warm white)\n- Surface: #FFFFFF (Pure white for cards)\n- Elevated: #F5F2ED (Subtle beige for hover states)\n- Borders/Hairlines: #E8E4DD (Soft beige borders)\n- Divider Subtle: #EBE8E2\n\n**Typography**\n- Primary: #1A1816 (Almost black, warm tone)\n- Secondary: #4A4542 (Dark gray)\n- Muted: #6B6662 (Medium gray)\n- Disabled: #9E9A95 (Light gray)\n\n**Accent Colors (Warm palette)**\n- Primary Actions: #D97706 (Warm amber/orange)\n- Primary Hover: #B45309\n- Primary Pressed: #92400E\n- Secondary Interactive: #059669 (Teal green)\n- Secondary Hover: #047857\n- Tertiary Brand: #7C3AED (Purple accent)\n- Tertiary Hover: #6D28D9\n\n**Semantic Colors**\n- Info: #2563EB (Blue)\n- Success: #059669 (Green)\n- Warning: #F59E0B (Amber)\n- Error/Urgency: #DC2626 (Red)\n\n**Effects**\n- Soft Elevation: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06)\n- Medium Elevation: 0 4px 6px rgba(0, 0, 0, 0.07), 0 2px 4px rgba(0, 0, 0, 0.05)\n- Focus Ring: 0 0 0 3px rgba(217, 119, 6, 0.25)\n- Card Hover Outline: 0 0 0 1px #E8E4DD\n- Backdrop: rgba(0, 0, 0, 0.5)\n- Popover Surface: #FFFFFF with border #E8E4DD\n\n## Layout System\n\n**Grid Structure**\n- Max Width: 1440px centered\n- 12-column grid with comfortable gutters\n- Top Bar: search, network pill, wallet connect, notifications\n- Responsive breakpoints: mobile (bottom sheet), tablet (condensed), desktop (full grid)\n\n## Component Specifications\n\n**Button Styling**\n- Primary: bg #D97706 (amber), text #FFFFFF\n- Secondary: border #059669, text #059669, hover bg rgba(5, 150, 105, 0.1)\n- Ghost: transparent bg, hover bg #F5F2ED\n- Danger: bg #DC2626, text #FFFFFF (high-commit actions only)\n- Tabs/Active Pill: bg #F5F2ED, border-b #D97706\n\n**Navigation**\n- Active item: subtle background with accent border\n- Icons from lucide-react\n- Clean, minimal design\n\n**Cards & Surfaces**\n- Market tiles: white cards with subtle shadows\n- Status badges (Bonding/Warmup/Perps) with semantic colors\n- Progress rings for graduation metrics\n- Clean borders and comfortable padding\n- Soft shadows for depth\n\n## Page-Specific Layouts\n\n**Dashboard**\n- Featured Market card: clean white card with status badge, graduation progress, KPIs\n- Create Market card: explainer with amber \"Launch Market\" CTA\n- Markets Table: clean rows with symbol, status, %→graduation, 24h vol, OI, Trade/Buy buttons\n\n**Launch Wizard**\n- 5-step stepper: Basics → Bonding Curve → Graduation Triggers → Perps Params → Fees\n- Side-by-side layout: form left, live summary preview right\n- Amber \"Deploy\" CTA, secondary buttons\n- Real-time preview of market tile with status timeline\n\n**Market Detail**\n- Left area: chart with candles/TWAP toggle, tabs for Trades/Funding/Positions\n- Right area: Context-aware trading panel (Bonding/Warmup/Perps modes)\n- Optional middle column (xl screens): Order Book + Recent Trades\n- Bottom strip: Balances/Open Orders/TWAP/History tabs\n\n**Discover**\n- Filterable grid of market tiles\n- Status color coding, progress rings, 24h vol, OI\n- Filters: Status, Volume, Time\n\n**Creator Dashboard**\n- Earnings breakdown from fees\n- Launched markets grid\n- Referral code generator\n- Payout history\n\n## Micro-Interactions\n\n**Timing & Motion**\n- Standard transitions: 150-200ms ease\n- Loading states: skeleton screens\n- Hover: subtle background color change on interactive elements\n- Focus: amber ring at 25% opacity\n\n**Feedback**\n- Toast notifications for transactions\n- Clear validation states\n- Error messages in red\n- Success messages in green\n\n## Typography Scale\n\nUse modern sans-serif fonts (Inter, system fonts) with comfortable spacing. Establish hierarchy through weight and color contrast.\n\n## Accessibility\n\n- WCAG AA contrast requirements (black text on beige/white backgrounds)\n- ARIA labels on all interactive elements\n- Keyboard navigation throughout\n- Screen reader friendly status announcements\n- Mobile: responsive design, touch-friendly targets\n\n## Images\n\nNo hero images required. Focus on data visualization, charts, and functional UI elements. Market tiles may include uploaded token/project images (user-provided).\n","size_bytes":4170},"client/src/stores/useMarketsStore.ts":{"content":"import { create } from \"zustand\";\nimport type { Market, OrderBook, Trade } from \"@shared/schema\";\n\ninterface MarketsState {\n  markets: Market[];\n  selectedMarket: Market | null;\n  orderBooks: Record<string, OrderBook>;\n  recentTrades: Record<string, Trade[]>;\n  \n  setMarkets: (markets: Market[]) => void;\n  selectMarket: (marketId: string) => void;\n  updateMarketMetrics: (marketId: string, metrics: Partial<Market[\"metrics\"]>) => void;\n  setOrderBook: (marketId: string, orderBook: OrderBook) => void;\n  addTrade: (marketId: string, trade: Trade) => void;\n}\n\nexport const useMarketsStore = create<MarketsState>((set, get) => ({\n  markets: [],\n  selectedMarket: null,\n  orderBooks: {},\n  recentTrades: {},\n\n  setMarkets: (markets) => set({ markets }),\n\n  selectMarket: (marketId) => {\n    const market = get().markets.find(m => m.id === marketId);\n    set({ selectedMarket: market || null });\n  },\n\n  updateMarketMetrics: (marketId, metrics) => {\n    set((state) => ({\n      markets: state.markets.map(m =>\n        m.id === marketId\n          ? { ...m, metrics: { ...m.metrics, ...metrics } }\n          : m\n      ),\n    }));\n  },\n\n  setOrderBook: (marketId, orderBook) => {\n    set((state) => ({\n      orderBooks: { ...state.orderBooks, [marketId]: orderBook },\n    }));\n  },\n\n  addTrade: (marketId, trade) => {\n    set((state) => {\n      const existing = state.recentTrades[marketId] || [];\n      return {\n        recentTrades: {\n          ...state.recentTrades,\n          [marketId]: [trade, ...existing].slice(0, 50),\n        },\n      };\n    });\n  },\n}));\n","size_bytes":1560},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/shared/MiniCandleCanvas.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface MiniCandleCanvasProps {\n  data?: number[];\n  className?: string;\n  height?: number;\n}\n\nexport function MiniCandleCanvas({ data = [], className = \"\", height = 80 }: MiniCandleCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n\n    ctx.scale(dpr, dpr);\n\n    ctx.clearRect(0, 0, rect.width, rect.height);\n\n    const prices = data.length > 0 ? data : Array.from({ length: 50 }, (_, i) => \n      50 + Math.sin(i * 0.2) * 20 + Math.random() * 10\n    );\n\n    const max = Math.max(...prices);\n    const min = Math.min(...prices);\n    const range = max - min || 1;\n\n    const barWidth = rect.width / prices.length;\n\n    prices.forEach((price, i) => {\n      const x = i * barWidth;\n      const normalizedHeight = ((price - min) / range) * (rect.height - 10);\n      const y = rect.height - normalizedHeight - 5;\n      const h = normalizedHeight;\n\n      const gradient = ctx.createLinearGradient(0, 0, 0, rect.height);\n      gradient.addColorStop(0, \"#00FFA3\");\n      gradient.addColorStop(1, \"rgba(0, 255, 163, 0.1)\");\n\n      ctx.fillStyle = gradient;\n      ctx.fillRect(x, y, Math.max(barWidth - 1, 1), h);\n    });\n\n    ctx.strokeStyle = \"#00FFA3\";\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n\n    prices.forEach((price, i) => {\n      const x = i * barWidth + barWidth / 2;\n      const y = rect.height - ((price - min) / range) * (rect.height - 10) - 5;\n\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    });\n\n    ctx.stroke();\n  }, [data]);\n\n  return (\n    <motion.div\n      className={`relative ${className}`}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"w-full\"\n        style={{ height: `${height}px` }}\n      />\n    </motion.div>\n  );\n}\n","size_bytes":2232},"client/src/pages/Creator.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { KPIStat } from \"@/components/shared/KPIStat\";\nimport { MarketTile } from \"@/components/shared/MarketTile\";\nimport { DollarSign, TrendingUp, Rocket, Copy, ExternalLink } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Market } from \"@shared/schema\";\n\nexport default function Creator() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [referralCode] = useState(\"SLAB-CREATOR-XYZ123\");\n\n  // Show authentication required message\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-6\">\n        <Card className=\"max-w-md w-full p-8 text-center\">\n          <Rocket className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-mono mb-2 text-foreground\">Authentication Required</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You need to be logged in to access creator analytics and earnings.\n          </p>\n          <Button \n            onClick={() => window.location.href = \"/api/login\"}\n            className=\"w-full\"\n            data-testid=\"button-login-creator\"\n          >\n            Log In to Continue\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  const mockStats = {\n    totalEarnings: 12543.67,\n    earningsChange: 23.45,\n    totalVolume: 8750000,\n    volumeChange: 18.23,\n    marketsCreated: 5,\n    marketsChange: 25,\n    referralEarnings: 1234.56,\n  };\n\n  const mockPayouts = [\n    { date: \"2025-10-20\", amount: 543.21, market: \"BONK\", type: \"Creator Fee\" },\n    { date: \"2025-10-19\", amount: 287.43, market: \"WIF\", type: \"Creator Fee\" },\n    { date: \"2025-10-18\", amount: 156.78, market: \"BONK\", type: \"Referral\" },\n    { date: \"2025-10-17\", amount: 892.34, market: \"MYRO\", type: \"Creator Fee\" },\n  ];\n\n  const mockMarkets: Market[] = Array.from({ length: 5 }, (_, i) => ({\n    id: `market-${i}`,\n    symbol: [\"BONK\", \"WIF\", \"MYRO\", \"POPCAT\", \"SILLY\"][i],\n    name: [\"Bonk Inu\", \"Dogwifhat\", \"Myro\", \"Popcat\", \"Silly Dragon\"][i],\n    status: ([\"warmup\", \"perps\", \"bonding\", \"perps\", \"warmup\"] as const)[i],\n    createdAt: Date.now() - i * 86400000,\n    creatorAddress: \"creator123\",\n    bondingConfig: {\n      curveType: \"linear\",\n      startPrice: 0.001,\n      creatorTax: 2,\n      protocolTax: 1,\n      seedVaultTax: 2,\n    },\n    graduationTriggers: {\n      minLiquidity: 1000000,\n      minHolders: 1000,\n      minAgeHours: 72,\n    },\n    perpsConfig: {\n      tickSize: 0.0001,\n      lotSize: 1,\n      maxLeverage: 20,\n      initialMargin: 5,\n      maintenanceMargin: 2.5,\n      priceBandBps: 1000,\n      fundingK: 0.0001,\n      warmupHours: 24,\n      warmupShortLevCap: 1,\n    },\n    fees: {\n      takerBps: 10,\n      makerBps: -2,\n      creatorFeePct: 30,\n      referrerFeePct: 10,\n    },\n    metrics: {\n      currentPrice: 0.00001234 * (1 + i * 0.2),\n      priceChange24h: -10 + Math.random() * 40,\n      volume24h: 500000 + i * 300000,\n      openInterest: i % 2 === 0 ? 250000 + i * 100000 : 0,\n      liquidity: 800000 + i * 150000,\n      holders: 1000 + i * 500,\n      ageHours: 24 + i * 12,\n      graduationProgress: Math.min(100, 40 + i * 15),\n    },\n  }));\n\n  const copyReferralCode = () => {\n    navigator.clipboard.writeText(referralCode);\n    toast({\n      title: \"Copied!\",\n      description: \"Referral code copied to clipboard\",\n      duration: 2000,\n    });\n  };\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to access the creator dashboard. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Show nothing while checking auth or redirecting\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"text-lg text-muted-foreground\">Checking authentication...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <h1 className=\"text-3xl font-bold mb-2\">Creator Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Track your earnings, markets, and referrals\n        </p>\n      </motion.div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <Card className=\"p-6 border-card-border bg-card\">\n            <KPIStat\n              icon={DollarSign}\n              label=\"Total Earnings\"\n              value={`$${mockStats.totalEarnings.toLocaleString()}`}\n              change={mockStats.earningsChange}\n              trend=\"up\"\n            />\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card className=\"p-6 border-card-border bg-card\">\n            <KPIStat\n              icon={TrendingUp}\n              label=\"Total Volume\"\n              value={`$${(mockStats.totalVolume / 1e6).toFixed(2)}M`}\n              change={mockStats.volumeChange}\n              trend=\"up\"\n            />\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.3 }}\n        >\n          <Card className=\"p-6 border-card-border bg-card\">\n            <KPIStat\n              icon={Rocket}\n              label=\"Markets Created\"\n              value={mockStats.marketsCreated}\n              change={mockStats.marketsChange}\n              trend=\"up\"\n            />\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3, delay: 0.4 }}\n        >\n          <Card className=\"p-6 border-card-border bg-card\">\n            <KPIStat\n              icon={DollarSign}\n              label=\"Referral Earnings\"\n              value={`$${mockStats.referralEarnings.toLocaleString()}`}\n              trend=\"up\"\n            />\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Referral Code */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.5 }}\n      >\n        <Card className=\"p-6 border-card-border bg-gradient-to-br from-card to-primary/5\">\n          <h3 className=\"text-lg font-semibold mb-4\">Referral Code</h3>\n          <div className=\"flex gap-3\">\n            <Input\n              value={referralCode}\n              readOnly\n              className=\"font-mono bg-background/50\"\n              data-testid=\"input-referral-code\"\n            />\n            <Button\n              variant=\"outline\"\n              onClick={copyReferralCode}\n              className=\"border-primary/30 hover:bg-primary/10\"\n              data-testid=\"button-copy-referral\"\n            >\n              <Copy className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-3\">\n            Share your code to earn {mockMarkets[0]?.fees.referrerFeePct || 10}% of trading fees from referred users\n          </p>\n        </Card>\n      </motion.div>\n\n      {/* Launched Markets */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.6 }}\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-semibold\">Your Markets</h2>\n          <Badge variant=\"outline\" className=\"bg-primary/10 text-primary border-primary/30\">\n            {mockMarkets.length} Active\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {mockMarkets.map((market, index) => (\n            <motion.div\n              key={market.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.2, delay: index * 0.05 }}\n            >\n              <MarketTile market={market} />\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n\n      {/* Payout History */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.7 }}\n      >\n        <h2 className=\"text-xl font-semibold mb-4\">Recent Payouts</h2>\n        <Card className=\"border-card-border bg-card overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border text-xs text-muted-foreground uppercase tracking-wide\">\n                  <th className=\"text-left p-3 font-medium\">Date</th>\n                  <th className=\"text-left p-3 font-medium\">Market</th>\n                  <th className=\"text-left p-3 font-medium\">Type</th>\n                  <th className=\"text-right p-3 font-medium\">Amount</th>\n                  <th className=\"text-right p-3 font-medium\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {mockPayouts.map((payout, index) => (\n                  <tr\n                    key={index}\n                    className=\"border-b border-border/50 last:border-0 hover-elevate\"\n                    data-testid={`row-payout-${index}`}\n                  >\n                    <td className=\"p-3 text-sm text-muted-foreground\">{payout.date}</td>\n                    <td className=\"p-3\">\n                      <Badge variant=\"outline\" className=\"font-mono\">{payout.market}</Badge>\n                    </td>\n                    <td className=\"p-3 text-sm\">{payout.type}</td>\n                    <td className=\"p-3 text-right font-mono font-semibold text-success\" data-numeric=\"true\">\n                      +${payout.amount.toFixed(2)}\n                    </td>\n                    <td className=\"p-3 text-right\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-tx-${index}`}>\n                        <ExternalLink className=\"w-3 h-3\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":11635},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/shared/LoadingSkeleton.tsx":{"content":"import { motion } from \"framer-motion\";\n\ninterface LoadingSkeletonProps {\n  className?: string;\n  count?: number;\n}\n\nexport function LoadingSkeleton({ className = \"\", count = 1 }: LoadingSkeletonProps) {\n  return (\n    <>\n      {Array.from({ length: count }).map((_, i) => (\n        <motion.div\n          key={i}\n          className={`bg-muted/20 rounded-md ${className}`}\n          animate={{\n            opacity: [0.5, 0.8, 0.5],\n          }}\n          transition={{\n            duration: 1.5,\n            repeat: Infinity,\n            delay: i * 0.1,\n          }}\n        />\n      ))}\n    </>\n  );\n}\n\nexport function MarketTableSkeleton() {\n  return (\n    <div className=\"space-y-2\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <div key={i} className=\"flex items-center gap-4 p-4 border border-border rounded-md\">\n          <LoadingSkeleton className=\"w-8 h-8 rounded-md\" />\n          <LoadingSkeleton className=\"w-20 h-4\" />\n          <LoadingSkeleton className=\"w-16 h-4 ml-auto\" />\n          <LoadingSkeleton className=\"w-24 h-4\" />\n          <LoadingSkeleton className=\"w-16 h-4\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1146},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/shared/EmptyState.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface EmptyStateProps {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  className?: string;\n}\n\nexport function EmptyState({ icon: Icon, title, description, action, className = \"\" }: EmptyStateProps) {\n  return (\n    <motion.div\n      className={`flex flex-col items-center justify-center py-16 px-4 ${className}`}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"w-16 h-16 rounded-full bg-muted/30 flex items-center justify-center mb-4\">\n        <Icon className=\"w-8 h-8 text-muted-foreground\" />\n      </div>\n      <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground text-center max-w-md mb-6\">\n        {description}\n      </p>\n      {action && (\n        <Button onClick={action.onClick} variant=\"default\" data-testid=\"button-empty-action\">\n          {action.label}\n        </Button>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":1177},"client/src/pages/Discover.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MarketTile } from \"@/components/shared/MarketTile\";\nimport { LoadingSkeleton } from \"@/components/shared/LoadingSkeleton\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, SlidersHorizontal } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport type { MarketStatus } from \"@shared/schema\";\nimport { useMarketsStore } from \"@/stores/useMarketsStore\";\nimport { fetchMarkets } from \"@/lib/api\";\n\nexport default function Discover() {\n  const { markets, setMarkets } = useMarketsStore();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<MarketStatus | \"all\">(\"all\");\n  const [sortBy, setSortBy] = useState<\"volume\" | \"time\" | \"progress\">(\"volume\");\n\n  useEffect(() => {\n    fetchMarkets().then(setMarkets);\n  }, []);\n\n  const filteredMarkets = markets\n    .filter(m => statusFilter === \"all\" || m.status === statusFilter)\n    .filter(m => m.symbol.toLowerCase().includes(searchQuery.toLowerCase()) || \n                 m.name.toLowerCase().includes(searchQuery.toLowerCase()))\n    .sort((a, b) => {\n      if (sortBy === \"volume\") return b.metrics.volume24h - a.metrics.volume24h;\n      if (sortBy === \"time\") return b.createdAt - a.createdAt;\n      return b.metrics.graduationProgress - a.metrics.graduationProgress;\n    });\n\n  if (!markets.length) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingSkeleton className=\"h-8 w-64\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <LoadingSkeleton className=\"h-64\" count={6} />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 px-4 py-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <h1 className=\"text-3xl font-bold mb-2\">Discover Markets</h1>\n        <p className=\"text-muted-foreground\">\n          Explore all bonding curves and perpetual markets\n        </p>\n      </motion.div>\n\n      <motion.div\n        className=\"flex flex-col sm:flex-row gap-4\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.1 }}\n      >\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search markets...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-markets\"\n          />\n        </div>\n\n        <Select value={statusFilter} onValueChange={(v) => setStatusFilter(v as MarketStatus | \"all\")}>\n          <SelectTrigger className=\"w-full sm:w-40\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"Status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"bonding\">Bonding</SelectItem>\n            <SelectItem value=\"warmup\">Warmup</SelectItem>\n            <SelectItem value=\"perps\">Perps Live</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={sortBy} onValueChange={(v) => setSortBy(v as \"volume\" | \"time\" | \"progress\")}>\n          <SelectTrigger className=\"w-full sm:w-40\" data-testid=\"select-sort\">\n            <SlidersHorizontal className=\"w-4 h-4 mr-2\" />\n            <SelectValue placeholder=\"Sort by\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"volume\">Volume</SelectItem>\n            <SelectItem value=\"time\">Recent</SelectItem>\n            <SelectItem value=\"progress\">Progress</SelectItem>\n          </SelectContent>\n        </Select>\n      </motion.div>\n\n      <motion.div\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.3, delay: 0.2 }}\n      >\n        {filteredMarkets.map((market, index) => (\n          <motion.div\n            key={market.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.2, delay: index * 0.05 }}\n          >\n            <MarketTile market={market} />\n          </motion.div>\n        ))}\n      </motion.div>\n\n      {filteredMarkets.length === 0 && (\n        <div className=\"text-center py-16\">\n          <p className=\"text-muted-foreground\">No markets found</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4726},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/lib/api.ts":{"content":"import type { Market, OrderBook, Trade } from \"@shared/schema\";\nimport marketsData from \"@/mocks/markets.json\";\n\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport async function fetchMarkets(): Promise<Market[]> {\n  await delay(300);\n  return marketsData as Market[];\n}\n\nexport async function fetchMarketBySymbol(symbol: string): Promise<Market | null> {\n  await delay(200);\n  const market = (marketsData as Market[]).find(m => m.symbol === symbol);\n  return market || null;\n}\n\nexport async function fetchOrderBook(marketId: string): Promise<OrderBook> {\n  await delay(150);\n  \n  const basePrice = 0.00001234;\n  const bids = Array.from({ length: 20 }, (_, i) => ({\n    price: basePrice * (1 - (i + 1) * 0.0005),\n    size: 1000 + Math.random() * 5000,\n    total: 1000 + (i + 1) * 1000,\n  }));\n  \n  const asks = Array.from({ length: 20 }, (_, i) => ({\n    price: basePrice * (1 + (i + 1) * 0.0005),\n    size: 1000 + Math.random() * 5000,\n    total: 1000 + (i + 1) * 1000,\n  }));\n\n  return {\n    marketId,\n    bids,\n    asks,\n    lastUpdate: Date.now(),\n  };\n}\n\nexport async function fetchRecentTrades(marketId: string): Promise<Trade[]> {\n  await delay(150);\n  \n  return Array.from({ length: 30 }, (_, i) => ({\n    id: `trade-${marketId}-${i}-${Date.now()}`,\n    marketId,\n    symbol: marketId.replace(\"market-\", \"\").toUpperCase(),\n    timestamp: Date.now() - i * 5000,\n    price: 0.00001234 * (1 + (Math.random() - 0.5) * 0.02),\n    size: 100 + Math.random() * 500,\n    side: Math.random() > 0.5 ? \"buy\" : \"sell\",\n  }));\n}\n\nexport async function simulateTrade(\n  marketId: string,\n  side: \"long\" | \"short\" | \"buy\" | \"sell\",\n  size: number,\n  price: number\n): Promise<{ success: boolean; txId: string }> {\n  await delay(1000);\n  \n  return {\n    success: true,\n    txId: `0x${Math.random().toString(16).slice(2)}`,\n  };\n}\n\nexport async function deployMarket(marketData: any): Promise<{ success: boolean; marketId: string; txId: string }> {\n  await delay(2500);\n  \n  return {\n    success: true,\n    marketId: `market-${marketData.basics.symbol.toLowerCase()}-${Date.now()}`,\n    txId: `0x${Math.random().toString(16).slice(2)}`,\n  };\n}\n\nlet realtimeUpdateInterval: NodeJS.Timeout | null = null;\n\nexport function startRealtimeUpdates(\n  onPriceUpdate: (marketId: string, price: number) => void,\n  onTradeUpdate: (trade: Trade) => void\n) {\n  if (realtimeUpdateInterval) return;\n\n  realtimeUpdateInterval = setInterval(() => {\n    const markets = marketsData as Market[];\n    const randomMarket = markets[Math.floor(Math.random() * markets.length)];\n    \n    const priceChange = (Math.random() - 0.5) * 0.0002;\n    const newPrice = randomMarket.metrics.currentPrice * (1 + priceChange);\n    \n    onPriceUpdate(randomMarket.id, newPrice);\n    \n    if (Math.random() > 0.7) {\n      const trade: Trade = {\n        id: `trade-${randomMarket.id}-${Date.now()}`,\n        marketId: randomMarket.id,\n        symbol: randomMarket.symbol,\n        timestamp: Date.now(),\n        price: newPrice,\n        size: 100 + Math.random() * 500,\n        side: Math.random() > 0.5 ? \"buy\" : \"sell\",\n      };\n      onTradeUpdate(trade);\n    }\n  }, 3000);\n}\n\nexport function stopRealtimeUpdates() {\n  if (realtimeUpdateInterval) {\n    clearInterval(realtimeUpdateInterval);\n    realtimeUpdateInterval = null;\n  }\n}\n","size_bytes":3322},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/db.ts":{"content":"import { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n","size_bytes":332},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { WalletService } from \"./walletService\";\nimport { Connection, PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram, sendAndConfirmTransaction } from \"@solana/web3.js\";\n\n// Solana connection (devnet for now)\nconst connection = new Connection(\"https://api.devnet.solana.com\", \"confirmed\");\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication middleware\n  await setupAuth(app);\n\n  // Auth routes - Return null if not authenticated (don't use isAuthenticated middleware)\n  app.get(\"/api/auth/user\", async (req: any, res) => {\n    try {\n      // If not authenticated, return null (not 401)\n      if (!req.isAuthenticated()) {\n        return res.json(null);\n      }\n\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Get or create user's wallet\n      let wallet = await storage.getUserWallet(userId);\n      if (!wallet) {\n        wallet = await storage.createWallet(userId);\n      }\n      \n      // Return user with wallet info (but not private key)\n      res.json({\n        ...user,\n        wallet: {\n          publicKey: wallet.publicKey,\n          balance: wallet.balance,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get wallet balance from blockchain\n  app.get(\"/api/wallet/balance\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const wallet = await storage.getUserWallet(userId);\n      \n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n      \n      // Fetch balance from Solana blockchain\n      const publicKey = new PublicKey(wallet.publicKey);\n      const balance = await connection.getBalance(publicKey);\n      const balanceInSol = balance / LAMPORTS_PER_SOL;\n      \n      // Update stored balance\n      await storage.updateWalletBalance(wallet.id, balanceInSol.toString());\n      \n      res.json({ balance: balanceInSol });\n    } catch (error) {\n      console.error(\"Error fetching wallet balance:\", error);\n      res.status(500).json({ message: \"Failed to fetch balance\" });\n    }\n  });\n\n  // Export private key (IMPORTANT: User must be authenticated)\n  app.get(\"/api/wallet/export-key\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const wallet = await storage.getUserWallet(userId);\n      \n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n      \n      // Decrypt and return private key in base58 format\n      const privateKey = WalletService.exportPrivateKey(wallet.encryptedPrivateKey);\n      \n      res.json({ privateKey });\n    } catch (error) {\n      console.error(\"Error exporting private key:\", error);\n      res.status(500).json({ message: \"Failed to export private key\" });\n    }\n  });\n\n  // Create wallet (in case user wants to regenerate)\n  app.post(\"/api/wallet/create\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Check if wallet already exists\n      const existingWallet = await storage.getUserWallet(userId);\n      if (existingWallet) {\n        return res.status(400).json({ message: \"Wallet already exists\" });\n      }\n      \n      // Create new wallet\n      const wallet = await storage.createWallet(userId);\n      \n      res.json({\n        publicKey: wallet.publicKey,\n        balance: wallet.balance,\n      });\n    } catch (error) {\n      console.error(\"Error creating wallet:\", error);\n      res.status(500).json({ message: \"Failed to create wallet\" });\n    }\n  });\n\n  // Withdraw SOL from custodial wallet\n  app.post(\"/api/wallet/withdraw\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { recipientAddress, amount } = req.body;\n\n      // Validate inputs\n      if (!recipientAddress || !amount) {\n        return res.status(400).json({ message: \"Recipient address and amount are required\" });\n      }\n\n      const amountNum = parseFloat(amount);\n      if (isNaN(amountNum) || amountNum <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      // Get user's wallet\n      const wallet = await storage.getUserWallet(userId);\n      if (!wallet) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      // Validate recipient address\n      let recipientPubKey: PublicKey;\n      try {\n        recipientPubKey = new PublicKey(recipientAddress);\n      } catch (error) {\n        return res.status(400).json({ message: \"Invalid recipient address\" });\n      }\n\n      // Get keypair from encrypted private key\n      const keypair = WalletService.getKeypair(wallet.encryptedPrivateKey);\n\n      // Check balance\n      const balance = await connection.getBalance(keypair.publicKey);\n      const balanceInSol = balance / LAMPORTS_PER_SOL;\n\n      // Estimate transaction fee (5000 lamports is typical for simple transfer)\n      const estimatedFee = 5000 / LAMPORTS_PER_SOL;\n      \n      if (balanceInSol < amountNum + estimatedFee) {\n        return res.status(400).json({ \n          message: \"Insufficient balance\",\n          balance: balanceInSol,\n          required: amountNum + estimatedFee\n        });\n      }\n\n      // Create transaction\n      const transaction = new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: keypair.publicKey,\n          toPubkey: recipientPubKey,\n          lamports: Math.floor(amountNum * LAMPORTS_PER_SOL),\n        })\n      );\n\n      // Send transaction\n      const signature = await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [keypair],\n        { commitment: \"confirmed\" }\n      );\n\n      // Update balance in database\n      const newBalance = await connection.getBalance(keypair.publicKey);\n      const newBalanceInSol = newBalance / LAMPORTS_PER_SOL;\n      await storage.updateWalletBalance(wallet.id, newBalanceInSol.toString());\n\n      res.json({\n        success: true,\n        signature,\n        newBalance: newBalanceInSol,\n        explorerUrl: `https://explorer.solana.com/tx/${signature}?cluster=devnet`\n      });\n    } catch (error) {\n      console.error(\"Error withdrawing SOL:\", error);\n      res.status(500).json({ \n        message: \"Failed to withdraw SOL\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // ========== MULTI-WALLET MANAGEMENT ENDPOINTS ==========\n\n  // List all wallets for authenticated user\n  app.get(\"/api/wallets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const allWallets = await storage.getAllUserWallets(userId);\n      \n      // Don't expose encrypted private keys in list view\n      const sanitizedWallets = allWallets.map((w: any) => ({\n        id: w.id,\n        name: w.name,\n        publicKey: w.publicKey,\n        balance: w.balance,\n        isPrimary: w.isPrimary,\n        isArchived: w.isArchived,\n        createdAt: w.createdAt,\n      }));\n\n      res.json(sanitizedWallets);\n    } catch (error) {\n      console.error(\"Error fetching wallets:\", error);\n      res.status(500).json({ message: \"Failed to fetch wallets\" });\n    }\n  });\n\n  // Create additional wallet for authenticated user\n  app.post(\"/api/wallets\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name } = req.body;\n\n      if (!name || typeof name !== \"string\" || name.length === 0) {\n        return res.status(400).json({ message: \"Wallet name is required\" });\n      }\n\n      // Create new wallet\n      const { publicKey, encryptedPrivateKey } = WalletService.createWallet();\n\n      const newWallet = await storage.createAdditionalWallet({\n        userId,\n        name,\n        publicKey,\n        encryptedPrivateKey,\n        balance: \"0\",\n        isPrimary: \"false\",\n        isArchived: \"false\",\n      });\n\n      // Don't expose encrypted private key\n      res.json({\n        id: newWallet.id,\n        name: newWallet.name,\n        publicKey: newWallet.publicKey,\n        balance: newWallet.balance,\n        isPrimary: newWallet.isPrimary,\n        isArchived: newWallet.isArchived,\n      });\n    } catch (error) {\n      console.error(\"Error creating wallet:\", error);\n      res.status(500).json({ message: \"Failed to create wallet\" });\n    }\n  });\n\n  // Update wallet (rename or archive)\n  app.patch(\"/api/wallets/:walletId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { walletId } = req.params;\n      const { name, isArchived } = req.body;\n\n      const wallet = await storage.getWalletById(walletId);\n      \n      if (!wallet || wallet.userId !== userId) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      const updatedWallet = await storage.updateWallet(walletId, {\n        name: name || wallet.name,\n        isArchived: isArchived !== undefined ? isArchived : wallet.isArchived,\n      });\n\n      res.json({\n        id: updatedWallet.id,\n        name: updatedWallet.name,\n        publicKey: updatedWallet.publicKey,\n        balance: updatedWallet.balance,\n        isPrimary: updatedWallet.isPrimary,\n        isArchived: updatedWallet.isArchived,\n      });\n    } catch (error) {\n      console.error(\"Error updating wallet:\", error);\n      res.status(500).json({ message: \"Failed to update wallet\" });\n    }\n  });\n\n  // Refresh specific wallet balance from blockchain\n  app.get(\"/api/wallets/:walletId/balance\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { walletId } = req.params;\n\n      const wallet = await storage.getWalletById(walletId);\n\n      if (!wallet || wallet.userId !== userId) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      // Fetch balance from Solana blockchain\n      const publicKey = new PublicKey(wallet.publicKey);\n      const balance = await connection.getBalance(publicKey);\n      const balanceInSol = balance / LAMPORTS_PER_SOL;\n\n      // Update cached balance in database\n      await storage.updateWalletBalance(wallet.id, balanceInSol.toString());\n\n      res.json({ \n        balance: balanceInSol,\n        publicKey: wallet.publicKey \n      });\n    } catch (error) {\n      console.error(\"Error fetching wallet balance:\", error);\n      res.status(500).json({ message: \"Failed to fetch balance\" });\n    }\n  });\n\n  // Export private key for a specific wallet\n  app.get(\"/api/wallets/:walletId/export-key\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { walletId } = req.params;\n\n      const wallet = await storage.getWalletById(walletId);\n\n      if (!wallet || wallet.userId !== userId) {\n        return res.status(404).json({ message: \"Wallet not found\" });\n      }\n\n      const privateKey = WalletService.exportPrivateKey(wallet.encryptedPrivateKey);\n\n      res.json({ privateKey });\n    } catch (error) {\n      console.error(\"Error exporting private key:\", error);\n      res.status(500).json({ message: \"Failed to export private key\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11634},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/Market.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { StatusBadge } from \"@/components/shared/StatusBadge\";\nimport { MiniCandleCanvas } from \"@/components/shared/MiniCandleCanvas\";\nimport { OrderBook } from \"@/components/shared/OrderBook\";\nimport { TradesFeed } from \"@/components/shared/TradesFeed\";\nimport { LoadingSkeleton } from \"@/components/shared/LoadingSkeleton\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport type { OrderBook as OrderBookType, Trade } from \"@shared/schema\";\nimport { fetchMarketBySymbol, fetchOrderBook, fetchRecentTrades } from \"@/lib/api\";\n\nexport default function Market() {\n  const [, params] = useRoute(\"/market/:symbol\");\n  const symbol = params?.symbol || \"BONK\";\n\n  const [chartMode, setChartMode] = useState<\"candles\" | \"twap\">(\"candles\");\n  const [activeTab, setActiveTab] = useState<\"trades\" | \"funding\" | \"positions\">(\"trades\");\n  const [market, setMarket] = useState<any>(null);\n  const [orderBook, setOrderBook] = useState<OrderBookType | null>(null);\n  const [trades, setTrades] = useState<Trade[]>([]);\n\n  // Trade ticket state\n  const [orderType, setOrderType] = useState<\"market\" | \"limit\">(\"market\");\n  const [side, setSide] = useState<\"buy\" | \"sell\">(\"buy\");\n  const [size, setSize] = useState(\"\");\n  const [limitPrice, setLimitPrice] = useState(\"\");\n  const [multiplier, setMultiplier] = useState([1]);\n\n  useEffect(() => {\n    const loadMarketData = async () => {\n      const marketData = await fetchMarketBySymbol(symbol);\n      if (marketData) {\n        setMarket(marketData);\n        const ob = await fetchOrderBook(marketData.id);\n        setOrderBook(ob);\n        const recentTrades = await fetchRecentTrades(marketData.id);\n        setTrades(recentTrades);\n        setLimitPrice(marketData.metrics.currentPrice.toFixed(4));\n      }\n    };\n\n    loadMarketData();\n\n    const interval = setInterval(async () => {\n      if (market) {\n        const recentTrades = await fetchRecentTrades(market.id);\n        setTrades(recentTrades);\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [symbol]);\n\n  if (!market || !orderBook) {\n    return (\n      <div className=\"space-y-4\">\n        <LoadingSkeleton className=\"h-12 w-96\" />\n        <div className=\"grid grid-cols-1 xl:grid-cols-12 gap-4\">\n          <LoadingSkeleton className=\"xl:col-span-6 h-96\" />\n          <LoadingSkeleton className=\"xl:col-span-3 h-96\" />\n          <LoadingSkeleton className=\"xl:col-span-3 h-96\" />\n        </div>\n      </div>\n    );\n  }\n\n  const isPriceUp = market.metrics.priceChange24h >= 0;\n  const effectiveSize = parseFloat(size || \"0\") * multiplier[0];\n  const total = orderType === \"market\" \n    ? effectiveSize * market.metrics.currentPrice\n    : effectiveSize * parseFloat(limitPrice || \"0\");\n\n  return (\n    <div className=\"space-y-4 px-4 py-4\">\n      {/* Header */}\n      <motion.div\n        className=\"flex items-center justify-between flex-wrap gap-4\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-solana-purple to-solana-mint flex items-center justify-center text-sm font-bold border border-primary/30\">\n            {symbol.slice(0, 2)}\n          </div>\n          <div>\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"text-xl font-bold text-primary\">{symbol}</h1>\n              <StatusBadge status={market.status} />\n            </div>\n            <p className=\"text-xs text-muted-foreground\">{market.name}</p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-6 text-xs\">\n          <div>\n            <div className=\"text-muted-foreground mb-1\">24H_VOL</div>\n            <div className=\"font-mono font-bold\" data-numeric=\"true\">\n              ${(market.metrics.volume24h / 1e3).toFixed(0)}K\n            </div>\n          </div>\n          <div>\n            <div className=\"text-muted-foreground mb-1\">OPEN_INT</div>\n            <div className=\"font-mono font-bold\" data-numeric=\"true\">\n              ${(market.metrics.openInterest / 1e3).toFixed(0)}K\n            </div>\n          </div>\n          {market.status === \"perps\" && market.metrics.fundingRate !== undefined && (\n            <div>\n              <div className=\"text-muted-foreground mb-1\">FUNDING</div>\n              <div className=\"font-mono font-bold text-primary\" data-numeric=\"true\">\n                {(market.metrics.fundingRate * 100).toFixed(4)}%\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n\n      {/* Main 3-column layout: Chart | OrderBook | Trade */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-12 gap-4\">\n        {/* Left: Chart */}\n        <div className=\"xl:col-span-6 space-y-4\">\n          <Card className=\"p-4 border-primary/20 bg-card\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-4\">\n                <div>\n                  <div className=\"text-xl font-bold font-mono\" data-numeric=\"true\">\n                    ${market.metrics.currentPrice.toFixed(8)}\n                  </div>\n                  <div className={`flex items-center gap-1 text-xs ${isPriceUp ? \"text-success\" : \"text-destructive\"}`}>\n                    {isPriceUp ? <TrendingUp className=\"w-3 h-3\" /> : <TrendingDown className=\"w-3 h-3\" />}\n                    <span className=\"font-mono\" data-numeric=\"true\">\n                      {isPriceUp ? \"+\" : \"\"}{market.metrics.priceChange24h.toFixed(2)}%\n                    </span>\n                    <span className=\"text-muted-foreground\">24H</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setChartMode(\"candles\")}\n                  className={`text-[10px] border ${chartMode === \"candles\" ? \"border-primary/50 text-primary\" : \"border-transparent\"}`}\n                  data-testid=\"button-chart-candles\"\n                >\n                  [CANDLES]\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setChartMode(\"twap\")}\n                  className={`text-[10px] border ${chartMode === \"twap\" ? \"border-primary/50 text-primary\" : \"border-transparent\"}`}\n                  data-testid=\"button-chart-twap\"\n                >\n                  [TWAP]\n                </Button>\n              </div>\n            </div>\n\n            <MiniCandleCanvas height={400} />\n\n            <div className=\"mt-4 text-[10px] text-muted-foreground text-center\">\n              &gt; CHART_SYSTEM.INIT [TRADINGVIEW_PENDING]\n            </div>\n          </Card>\n        </div>\n\n        {/* Middle: Order Book */}\n        <div className=\"xl:col-span-3\">\n          <Card className=\"border-primary/20 bg-card overflow-hidden h-full\">\n            <div className=\"p-3 border-b border-primary/20\">\n              <h3 className=\"text-xs font-bold text-primary\">ORDER_BOOK.DB</h3>\n            </div>\n            <OrderBook\n              bids={orderBook.bids}\n              asks={orderBook.asks}\n            />\n          </Card>\n        </div>\n\n        {/* Right: Trade Panel */}\n        <div className=\"xl:col-span-3\">\n          <Card className=\"p-4 border-primary/20 bg-card\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xs font-bold text-primary\">TRADE.EXEC</h3>\n            </div>\n\n            {/* Order Type Tabs */}\n            <Tabs value={orderType} onValueChange={(v) => setOrderType(v as \"market\" | \"limit\")} className=\"mb-4\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-background border border-primary/20\">\n                <TabsTrigger \n                  value=\"market\" \n                  className=\"text-[10px] data-[state=active]:bg-primary/10 data-[state=active]:text-primary\"\n                  data-testid=\"tab-market\"\n                >\n                  [MARKET]\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"limit\" \n                  className=\"text-[10px] data-[state=active]:bg-primary/10 data-[state=active]:text-primary\"\n                  data-testid=\"tab-limit\"\n                >\n                  [LIMIT]\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            {/* Buy/Sell Tabs */}\n            <Tabs value={side} onValueChange={(v) => setSide(v as \"buy\" | \"sell\")} className=\"mb-4\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-background border border-primary/20\">\n                <TabsTrigger \n                  value=\"buy\" \n                  className=\"text-[10px] data-[state=active]:bg-primary/10 data-[state=active]:text-primary\"\n                  data-testid=\"tab-buy\"\n                >\n                  [BUY]\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"sell\" \n                  className=\"text-[10px] data-[state=active]:bg-destructive/10 data-[state=active]:text-destructive\"\n                  data-testid=\"tab-sell\"\n                >\n                  [SELL]\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n\n            <div className=\"space-y-3\">\n              {/* Limit Price (only for limit orders) */}\n              {orderType === \"limit\" && (\n                <div>\n                  <Label htmlFor=\"limit-price\" className=\"text-[10px] text-muted-foreground mb-1.5 block\">\n                    LIMIT_PRICE\n                  </Label>\n                  <Input\n                    id=\"limit-price\"\n                    type=\"number\"\n                    placeholder=\"0.0000\"\n                    value={limitPrice}\n                    onChange={(e) => setLimitPrice(e.target.value)}\n                    className=\"font-mono text-sm h-9 bg-background border-primary/20\"\n                    data-testid=\"input-limit-price\"\n                  />\n                </div>\n              )}\n\n              {/* Size */}\n              <div>\n                <Label htmlFor=\"size-input\" className=\"text-[10px] text-muted-foreground mb-1.5 block\">\n                  SIZE ({symbol})\n                </Label>\n                <Input\n                  id=\"size-input\"\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  value={size}\n                  onChange={(e) => setSize(e.target.value)}\n                  className=\"font-mono text-sm h-9 bg-background border-primary/20\"\n                  data-testid=\"input-size\"\n                />\n              </div>\n\n              {/* Multiplier Slider */}\n              <div>\n                <div className=\"flex items-center justify-between mb-1.5\">\n                  <Label className=\"text-[10px] text-muted-foreground\">\n                    MULTIPLIER\n                  </Label>\n                  <span className=\"text-xs font-bold font-mono text-primary\" data-numeric=\"true\">\n                    {multiplier[0]}x\n                  </span>\n                </div>\n                <Slider\n                  value={multiplier}\n                  onValueChange={setMultiplier}\n                  max={100}\n                  min={1}\n                  step={1}\n                  className=\"mb-1\"\n                  data-testid=\"slider-multiplier\"\n                />\n                <div className=\"flex justify-between text-[9px] text-muted-foreground\">\n                  <span>1x</span>\n                  <span>50x</span>\n                  <span>100x</span>\n                </div>\n              </div>\n\n              {/* Order Summary */}\n              <div className=\"space-y-1.5 text-[10px] p-3 bg-background/50 border border-primary/20\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">PRICE</span>\n                  <span className=\"font-mono\" data-numeric=\"true\">\n                    ${orderType === \"market\" ? market.metrics.currentPrice.toFixed(4) : (limitPrice || \"0.0000\")}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">SIZE</span>\n                  <span className=\"font-mono\" data-numeric=\"true\">{size || \"0.00\"}</span>\n                </div>\n                {multiplier[0] > 1 && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">MULTIPLIER</span>\n                    <span className=\"font-mono text-primary\" data-numeric=\"true\">{multiplier[0]}x</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">EFFECTIVE_SIZE</span>\n                  <span className=\"font-mono\" data-numeric=\"true\">{effectiveSize.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between pt-1.5 border-t border-primary/20\">\n                  <span className=\"text-primary\">TOTAL</span>\n                  <span className=\"font-mono font-bold text-primary\" data-numeric=\"true\">\n                    ${total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <motion.div whileTap={{ scale: 0.98 }}>\n                <Button\n                  variant=\"outline\"\n                  className={`w-full h-9 font-bold text-[10px] ${\n                    side === \"buy\" \n                      ? \"border-primary/30 text-primary hover:bg-primary/10\" \n                      : \"border-destructive/30 text-destructive hover:bg-destructive/10\"\n                  }`}\n                  disabled={!size || parseFloat(size) <= 0 || (orderType === \"limit\" && !limitPrice)}\n                  data-testid=\"button-trade-submit\"\n                >\n                  [{orderType.toUpperCase()}_{side.toUpperCase()}]\n                </Button>\n              </motion.div>\n\n              <div className=\"text-[9px] text-center text-muted-foreground\">\n                &gt; CONNECT_WALLET_TO_TRADE\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Bottom Tabs */}\n      <Card className=\"border-primary/20 bg-card\">\n        <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as typeof activeTab)}>\n          <div className=\"border-b border-primary/20 px-4\">\n            <TabsList className=\"bg-transparent border-0 h-10\">\n              <TabsTrigger value=\"trades\" className=\"text-[10px] data-[state=active]:border-b-2 data-[state=active]:border-primary\" data-testid=\"tab-trades\">\n                [TRADES]\n              </TabsTrigger>\n              <TabsTrigger value=\"positions\" className=\"text-[10px] data-[state=active]:border-b-2 data-[state=active]:border-primary\" data-testid=\"tab-positions\">\n                [POSITIONS]\n              </TabsTrigger>\n              <TabsTrigger value=\"orders\" className=\"text-[10px] data-[state=active]:border-b-2 data-[state=active]:border-primary\" data-testid=\"tab-orders\">\n                [ORDERS]\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"trades\" className=\"mt-0\">\n            <TradesFeed trades={trades} />\n          </TabsContent>\n\n          <TabsContent value=\"positions\" className=\"p-6\">\n            <div className=\"text-center py-8 text-muted-foreground text-xs\">\n              &gt; NO_OPEN_POSITIONS\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"orders\" className=\"p-6\">\n            <div className=\"text-center py-8 text-muted-foreground text-xs\">\n              &gt; NO_OPEN_ORDERS\n            </div>\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16323},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { MiniCandleCanvas } from \"@/components/shared/MiniCandleCanvas\";\nimport { StatusBadge } from \"@/components/shared/StatusBadge\";\nimport { KPIStat } from \"@/components/shared/KPIStat\";\nimport { ProgressRing } from \"@/components/shared/ProgressRing\";\nimport { LoadingSkeleton } from \"@/components/shared/LoadingSkeleton\";\nimport { Rocket, TrendingUp, Users, Droplet, Clock } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\nimport { useMarketsStore } from \"@/stores/useMarketsStore\";\nimport { fetchMarkets, startRealtimeUpdates, stopRealtimeUpdates } from \"@/lib/api\";\n\nexport default function Dashboard() {\n  const { markets, setMarkets, updateMarketMetrics, addTrade } = useMarketsStore();\n\n  useEffect(() => {\n    fetchMarkets().then(setMarkets);\n\n    startRealtimeUpdates(\n      (marketId, price) => {\n        updateMarketMetrics(marketId, { currentPrice: price });\n      },\n      (trade) => {\n        addTrade(trade.marketId, trade);\n      }\n    );\n\n    return () => {\n      stopRealtimeUpdates();\n    };\n  }, []);\n\n  if (!markets.length) {\n    return (\n      <div className=\"space-y-6\">\n        <LoadingSkeleton className=\"h-8 w-64\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6\">\n          <div className=\"lg:col-span-8\">\n            <LoadingSkeleton className=\"h-96\" />\n          </div>\n          <div className=\"lg:col-span-4\">\n            <LoadingSkeleton className=\"h-96\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const featuredMarket = markets[0];\n\n  return (\n    <div className=\"space-y-6 px-4 py-4\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <h1 className=\"text-2xl font-bold mb-2 text-primary\">\n          $ SLAB/TERMINAL\n        </h1>\n        <p className=\"text-muted-foreground text-sm\">\n          &gt; LAUNCH PERPETUAL MARKETS WITH BONDING CURVES\n        </p>\n      </motion.div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-6\">\n        <motion.div\n          className=\"lg:col-span-8\"\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.3, delay: 0.1 }}\n        >\n          <Card className=\"p-6 border-primary/20 bg-card\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h2 className=\"text-xl font-bold mb-1 text-primary\">{featuredMarket.symbol}</h2>\n                <p className=\"text-xs text-muted-foreground\">{featuredMarket.name}</p>\n              </div>\n              <StatusBadge status={featuredMarket.status} />\n            </div>\n\n            <MiniCandleCanvas height={120} className=\"mb-6\" />\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 mb-6\">\n              <KPIStat\n                icon={Droplet}\n                label=\"LIQUIDITY\"\n                value={`$${(featuredMarket.metrics.liquidity / 1e6).toFixed(2)}M`}\n                trend=\"up\"\n              />\n              <KPIStat\n                icon={Users}\n                label=\"HOLDERS\"\n                value={featuredMarket.metrics.holders}\n                trend=\"up\"\n              />\n              <KPIStat\n                icon={Clock}\n                label=\"AGE\"\n                value={`${featuredMarket.metrics.ageHours}h`}\n                trend=\"neutral\"\n              />\n              <KPIStat\n                icon={TrendingUp}\n                label=\"24H CHG\"\n                value={`${featuredMarket.metrics.priceChange24h > 0 ? \"+\" : \"\"}${featuredMarket.metrics.priceChange24h.toFixed(2)}%`}\n                trend={featuredMarket.metrics.priceChange24h >= 0 ? \"up\" : \"down\"}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-background/50 border border-primary/20\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-xs font-medium text-muted-foreground\">GRADUATION PROGRESS</span>\n                  <span className=\"text-xs font-bold text-primary\">{featuredMarket.metrics.graduationProgress}%</span>\n                </div>\n                <div className=\"h-1 bg-muted/20 border border-primary/20 overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-primary\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${featuredMarket.metrics.graduationProgress}%` }}\n                    transition={{ duration: 1, ease: \"easeOut\" }}\n                  />\n                </div>\n              </div>\n              <ProgressRing progress={featuredMarket.metrics.graduationProgress} size={60} className=\"ml-4\" />\n            </div>\n\n            <Link href={`/market/${featuredMarket.symbol}`}>\n              <Button className=\"w-full mt-4 border-primary/30 bg-transparent text-primary hover:bg-primary/10\" variant=\"outline\" data-testid=\"button-view-market\">\n                [VIEW MARKET]\n              </Button>\n            </Link>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          className=\"lg:col-span-4\"\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ duration: 0.3, delay: 0.2 }}\n        >\n          <Card className=\"p-6 border-primary/20 bg-card h-full flex flex-col\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-solana-mint via-solana-aqua to-solana-purple flex items-center justify-center mb-4 border border-primary/30\">\n              <Rocket className=\"w-5 h-5 text-black\" />\n            </div>\n            <h3 className=\"text-base font-bold mb-2 text-primary\">LAUNCH MARKET</h3>\n            <p className=\"text-xs text-muted-foreground mb-6 flex-1\">\n              &gt; Create perpetual market with custom bonding curve\n              <br />\n              &gt; Earn fees from trades and graduation\n            </p>\n            <Link href=\"/launch\">\n              <Button className=\"w-full border-primary/30 bg-transparent text-primary hover:bg-primary/10\" variant=\"outline\" data-testid=\"button-launch-market\">\n                [LAUNCH]\n              </Button>\n            </Link>\n          </Card>\n        </motion.div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.3 }}\n      >\n        <Card className=\"border-primary/20 bg-card overflow-hidden\">\n          <div className=\"p-4 border-b border-primary/20\">\n            <h2 className=\"text-sm font-bold text-primary\">ALL_MARKETS.DB</h2>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full font-mono text-xs\">\n              <thead>\n                <tr className=\"border-b border-primary/20 text-muted-foreground\">\n                  <th className=\"text-left p-3 font-medium\">MARKET</th>\n                  <th className=\"text-left p-3 font-medium\">STATUS</th>\n                  <th className=\"text-right p-3 font-medium\">GRAD%</th>\n                  <th className=\"text-right p-3 font-medium\">24H_VOL</th>\n                  <th className=\"text-right p-3 font-medium\">OPEN_INT</th>\n                  <th className=\"text-right p-3 font-medium\">ACTION</th>\n                </tr>\n              </thead>\n              <tbody>\n                {markets.map((market, index) => (\n                  <motion.tr\n                    key={market.id}\n                    className=\"border-b border-primary/10 last:border-0 hover:bg-primary/5\"\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.2, delay: index * 0.05 }}\n                    data-testid={`row-market-${market.symbol}`}\n                  >\n                    <td className=\"p-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-6 h-6 bg-gradient-to-br from-solana-purple to-solana-mint flex items-center justify-center text-[10px] font-bold border border-primary/30\">\n                          {market.symbol.slice(0, 2)}\n                        </div>\n                        <span className=\"font-bold text-primary\">{market.symbol}</span>\n                      </div>\n                    </td>\n                    <td className=\"p-3\">\n                      <StatusBadge status={market.status} />\n                    </td>\n                    <td className=\"p-3 text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <div className=\"w-12 h-1 bg-background border border-primary/20 overflow-hidden\">\n                          <div\n                            className=\"h-full bg-primary\"\n                            style={{ width: `${market.metrics.graduationProgress}%` }}\n                          />\n                        </div>\n                        <span className=\"font-mono text-xs text-muted-foreground\" data-numeric=\"true\">{market.metrics.graduationProgress}%</span>\n                      </div>\n                    </td>\n                    <td className=\"p-3 text-right font-mono text-muted-foreground\" data-numeric=\"true\">\n                      ${(market.metrics.volume24h / 1e3).toFixed(0)}K\n                    </td>\n                    <td className=\"p-3 text-right font-mono text-muted-foreground\" data-numeric=\"true\">\n                      ${(market.metrics.openInterest / 1e3).toFixed(0)}K\n                    </td>\n                    <td className=\"p-3 text-right\">\n                      <Link href={`/market/${market.symbol}`}>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"border border-primary/20 text-primary hover:bg-primary/10 text-[10px]\" data-testid={`button-trade-${market.symbol}`}>\n                          {market.status === \"bonding\" ? \"[BUY]\" : \"[TRADE]\"}\n                        </Button>\n                      </Link>\n                    </td>\n                  </motion.tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":10352},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* WARM BEIGE & WHITE THEME - Clean, professional design */\n.dark {\n  --button-outline: rgba(217, 119, 6, .15);\n  --badge-outline: rgba(217, 119, 6, .08);\n\n  --opaque-button-border-intensity: 8;\n\n  --elevate-1: rgba(26, 24, 22, .02);\n  --elevate-2: rgba(26, 24, 22, .05);\n\n  /* Core Neutrals (Warm Beige/White) */\n  --background: 43 30% 97%;  /* #FAF8F5 - Soft warm white */\n  --foreground: 20 10% 9%;  /* #1A1816 - Almost black, warm tone */\n  \n  --card: 0 0% 100%;  /* #FFFFFF - Pure white */\n  --card-foreground: 20 10% 9%;  /* Almost black */\n  --card-border: 30 20% 88%;  /* #E8E4DD - Soft beige border */\n  \n  --border: 30 20% 88%;  /* #E8E4DD - Soft beige border */\n  \n  /* Primary (Warm Amber/Orange) */\n  --primary: 28 96% 44%;  /* #D97706 - Warm amber */\n  --primary-foreground: 0 0% 100%;  /* White text on amber */\n  \n  /* Secondary (Teal Green) */\n  --secondary: 166 76% 34%;  /* #059669 - Teal green */\n  --secondary-foreground: 0 0% 100%;  /* White text */\n  \n  /* Accent (Purple) */\n  --accent: 258 90% 58%;  /* #7C3AED - Purple */\n  --accent-foreground: 0 0% 100%;  /* White text */\n  \n  /* Destructive (Red) */\n  --destructive: 0 72% 51%;  /* #DC2626 - Red */\n  --destructive-foreground: 0 0% 100%;  /* White text */\n  \n  /* Muted (Subtle beige) */\n  --muted: 36 24% 94%;  /* #F5F2ED - Subtle beige */\n  --muted-foreground: 20 6% 45%;  /* #6B6662 - Medium gray */\n  \n  /* Sidebar */\n  --sidebar: 0 0% 100%;  /* White sidebar */\n  --sidebar-foreground: 20 10% 9%;  /* Almost black */\n  --sidebar-border: 30 20% 88%;\n  --sidebar-primary: 28 96% 44%;\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: 36 24% 94%;\n  --sidebar-accent-foreground: 20 10% 9%;\n  --sidebar-ring: 28 96% 44%;\n  \n  /* Popover */\n  --popover: 0 0% 100%;  /* White */\n  --popover-foreground: 20 10% 9%;\n  --popover-border: 30 20% 88%;\n  \n  --input: 30 20% 88%;\n  --ring: 28 96% 44%;\n  \n  /* Success/Warning colors */\n  --success: 166 76% 34%;  /* Green */\n  --warning: 38 92% 50%;  /* Amber */\n  --info: 221 83% 53%;  /* Blue */\n  \n  /* Charts - warm palette */\n  --chart-1: 28 96% 44%;  /* Amber */\n  --chart-2: 166 76% 34%;  /* Teal */\n  --chart-3: 258 90% 58%;  /* Purple */\n  --chart-4: 221 83% 53%;  /* Blue */\n  --chart-5: 0 72% 51%;  /* Red */\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  --font-serif: 'Georgia', 'Times New Roman', serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;\n  --radius: 0.5rem;  /* Rounded corners */\n  \n  --shadow-2xs: 0 1px 2px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0 1px 3px rgba(0, 0, 0, 0.1);\n  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);\n  --shadow: 0 4px 6px rgba(0, 0, 0, 0.07), 0 2px 4px rgba(0, 0, 0, 0.05);\n  --shadow-md: 0 6px 12px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0 20px 30px rgba(0, 0, 0, 0.12);\n  --shadow-2xl: 0 25px 40px rgba(0, 0, 0, 0.15);\n  --tracking-normal: -0.01em;\n  --spacing: 0.5rem;\n\n  /* Computed borders */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  \n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html {\n    @apply dark;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    letter-spacing: var(--tracking-normal);\n  }\n  \n  /* Numeric data */\n  [data-numeric=\"true\"] {\n    font-variant-numeric: tabular-nums;\n    font-family: var(--font-mono);\n  }\n\n  /* Headings */\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n    font-family: var(--font-sans);\n    letter-spacing: -0.02em;\n  }\n}\n\n/* Clean utilities */\n@layer utilities {\n  /* Background gradients */\n  .bg-gradient-to-br {\n    background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));\n  }\n\n  /* Subtle hover effects */\n  .hover-elevate {\n    transition: background-color 150ms ease, border-color 150ms ease, box-shadow 150ms ease;\n  }\n  \n  .hover-elevate:hover {\n    background-color: var(--elevate-1);\n    box-shadow: var(--shadow-sm);\n  }\n  \n  .active-elevate-2:active {\n    background-color: var(--elevate-2);\n    box-shadow: var(--shadow-xs);\n  }\n\n  /* Success/error states */\n  .text-success {\n    color: hsl(var(--success));\n  }\n  \n  .text-error {\n    color: hsl(var(--destructive));\n  }\n  \n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  \n  .text-info {\n    color: hsl(var(--info));\n  }\n\n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  \n  .bg-error {\n    background-color: hsl(var(--destructive));\n  }\n  \n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  \n  .bg-info {\n    background-color: hsl(var(--info));\n  }\n\n  /* Border utilities */\n  .border-success {\n    border-color: hsl(var(--success));\n  }\n  \n  .border-error {\n    border-color: hsl(var(--destructive));\n  }\n  \n  .border-warning {\n    border-color: hsl(var(--warning));\n  }\n  \n  .border-info {\n    border-color: hsl(var(--info));\n  }\n}\n","size_bytes":6078},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface UserWithWallet extends User {\n  wallet?: {\n    publicKey: string;\n    balance: string;\n  };\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<UserWithWallet>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":520},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/shared/TradesFeed.tsx":{"content":"import { Trade } from \"@shared/schema\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface TradesFeedProps {\n  trades: Trade[];\n  className?: string;\n}\n\nexport function TradesFeed({ trades, className = \"\" }: TradesFeedProps) {\n  const formatTime = (timestamp: number) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString(\"en-US\", { hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\", hour12: false });\n  };\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"grid grid-cols-4 gap-2 px-3 py-2 text-xs text-muted-foreground uppercase tracking-wide border-b border-border\">\n        <div>Time</div>\n        <div className=\"text-right\">Price</div>\n        <div className=\"text-right\">Size</div>\n        <div className=\"text-right\">Side</div>\n      </div>\n\n      <div className=\"max-h-[400px] overflow-y-auto\">\n        <AnimatePresence initial={false}>\n          {trades.map((trade, index) => (\n            <motion.div\n              key={trade.id}\n              className=\"grid grid-cols-4 gap-2 px-3 py-2 hover-elevate border-b border-border/50 last:border-0\"\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: 20 }}\n              transition={{ duration: 0.15 }}\n              data-testid={`trade-${index}`}\n            >\n              <div className=\"text-xs text-muted-foreground font-mono\" data-numeric=\"true\">\n                {formatTime(trade.timestamp)}\n              </div>\n              <div className={`text-xs font-mono text-right ${trade.side === \"buy\" ? \"text-success\" : \"text-destructive\"}`} data-numeric=\"true\">\n                {trade.price.toFixed(4)}\n              </div>\n              <div className=\"text-xs font-mono text-right\" data-numeric=\"true\">\n                {trade.size.toFixed(2)}\n              </div>\n              <div className=\"flex items-center justify-end gap-1\">\n                {trade.side === \"buy\" ? (\n                  <TrendingUp className=\"w-3 h-3 text-success\" />\n                ) : (\n                  <TrendingDown className=\"w-3 h-3 text-destructive\" />\n                )}\n                <span className={`text-xs font-medium ${trade.side === \"buy\" ? \"text-success\" : \"text-destructive\"}`}>\n                  {trade.side.toUpperCase()}\n                </span>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2520},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4178},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/trading/PerpsTicket.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { motion } from \"framer-motion\";\n\ninterface PerpsTicketProps {\n  symbol: string;\n  currentPrice: number;\n  maxLeverage: number;\n  takerFeeBps: number;\n  isWarmup?: boolean;\n  shortLevCap?: number;\n  className?: string;\n}\n\nexport function PerpsTicket({ \n  symbol, \n  currentPrice, \n  maxLeverage,\n  takerFeeBps,\n  isWarmup = false,\n  shortLevCap = 1,\n  className = \"\" \n}: PerpsTicketProps) {\n  const [side, setSide] = useState<\"long\" | \"short\">(\"long\");\n  const [size, setSize] = useState(\"\");\n  const [leverage, setLeverage] = useState([5]);\n\n  const effectiveMaxLeverage = isWarmup && side === \"short\" ? shortLevCap : maxLeverage;\n\n  useEffect(() => {\n    if (leverage[0] > effectiveMaxLeverage) {\n      setLeverage([effectiveMaxLeverage]);\n    }\n  }, [side, effectiveMaxLeverage]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.target instanceof HTMLInputElement) return;\n      \n      if (e.key === \"ArrowLeft\") {\n        setLeverage([Math.max(1, leverage[0] - 1)]);\n      } else if (e.key === \"ArrowRight\") {\n        setLeverage([Math.min(effectiveMaxLeverage, leverage[0] + 1)]);\n      } else if (e.key === \"+\" || e.key === \"=\") {\n        setSize(String(parseFloat(size || \"0\") + 1));\n      } else if (e.key === \"-\" || e.key === \"_\") {\n        setSize(String(Math.max(0, parseFloat(size || \"0\") - 1)));\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [size, leverage, effectiveMaxLeverage]);\n\n  const positionValue = parseFloat(size || \"0\") * currentPrice;\n  const margin = positionValue / leverage[0];\n  const fee = positionValue * (takerFeeBps / 10000);\n\n  return (\n    <Card className={`p-4 ${className}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">Trade</h3>\n        {isWarmup && (\n          <Badge variant=\"outline\" className=\"bg-warning/10 text-warning border-warning/30\">\n            Warmup Mode\n          </Badge>\n        )}\n      </div>\n\n      <Tabs value={side} onValueChange={(v) => setSide(v as \"long\" | \"short\")} className=\"mb-4\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger \n            value=\"long\" \n            className=\"data-[state=active]:bg-success/20 data-[state=active]:text-success\"\n            data-testid=\"tab-long\"\n          >\n            Long\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"short\" \n            className=\"data-[state=active]:bg-destructive/20 data-[state=active]:text-destructive\"\n            disabled={isWarmup}\n            data-testid=\"tab-short\"\n          >\n            Short {isWarmup && \"🔒\"}\n          </TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      {isWarmup && side === \"short\" && (\n        <div className=\"p-3 mb-4 bg-warning/10 border border-warning/30 rounded-md text-xs text-warning\">\n          Shorts unlock after warmup & health checks complete\n        </div>\n      )}\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"size-input\" className=\"text-xs text-muted-foreground mb-2\">\n            Size ({symbol})\n          </Label>\n          <Input\n            id=\"size-input\"\n            type=\"number\"\n            placeholder=\"0.00\"\n            value={size}\n            onChange={(e) => setSize(e.target.value)}\n            className=\"font-mono text-lg h-12\"\n            data-testid=\"input-size\"\n          />\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Keyboard: +/− to adjust size\n          </p>\n        </div>\n\n        <div>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Label className=\"text-xs text-muted-foreground\">\n              Leverage\n            </Label>\n            <span className=\"text-sm font-bold font-mono text-primary\" data-numeric=\"true\">\n              {leverage[0]}x\n            </span>\n          </div>\n          <Slider\n            value={leverage}\n            onValueChange={setLeverage}\n            max={effectiveMaxLeverage}\n            min={1}\n            step={1}\n            className=\"mb-1\"\n            data-testid=\"slider-leverage\"\n          />\n          <p className=\"text-xs text-muted-foreground\">\n            Keyboard: ←/→ to adjust leverage\n          </p>\n        </div>\n\n        <div className=\"space-y-2 text-sm p-3 bg-muted/10 rounded-md\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Entry Price</span>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">${currentPrice.toFixed(4)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Position Value</span>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">${positionValue.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Margin Required</span>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">${margin.toFixed(2)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Est. Fee ({takerFeeBps}bps)</span>\n            <span className=\"font-mono font-medium\" data-numeric=\"true\">${fee.toFixed(4)}</span>\n          </div>\n        </div>\n\n        <motion.div whileTap={{ scale: 0.98 }}>\n          <Button\n            className={`w-full h-11 font-semibold ${\n              side === \"long\" \n                ? \"bg-success hover:bg-success/90 text-black\" \n                : \"bg-destructive hover:bg-destructive/90\"\n            }`}\n            disabled={!size || parseFloat(size) <= 0}\n            data-testid=\"button-trade-submit\"\n          >\n            Open {side === \"long\" ? \"Long\" : \"Short\"}\n          </Button>\n        </motion.div>\n\n        <div className=\"text-xs text-center text-muted-foreground space-y-1\">\n          <p>Reserve → Cap TTL → Commit (mock)</p>\n          <p>Press Enter to submit</p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6526},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/layout/TopBar.tsx":{"content":"import { Search, Bell, Wallet, Home, Rocket, Compass, TrendingUp, User, FileText, Menu, LogOut, Key, Copy, Download, Upload, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst navItems = [\n  { icon: Home, label: \"Dashboard\", path: \"/\" },\n  { icon: Rocket, label: \"Launch\", path: \"/launch\" },\n  { icon: Compass, label: \"Discover\", path: \"/discover\" },\n  { icon: TrendingUp, label: \"Markets\", path: \"/markets\" },\n  { icon: Wallet, label: \"Portfolio\", path: \"/portfolio\" },\n  { icon: User, label: \"Creator\", path: \"/creator\" },\n  { icon: FileText, label: \"Docs\", path: \"/docs\" },\n];\n\nexport function TopBar() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchFocused, setSearchFocused] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [walletDialogOpen, setWalletDialogOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState<\"deposit\" | \"withdraw\">(\"deposit\");\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [recipientAddress, setRecipientAddress] = useState(\"\");\n  const [location, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n\n  // Export private key mutation\n  const exportKeyMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(\"/api/wallet/export-key\", { credentials: \"include\" });\n      if (!res.ok) throw new Error(\"Failed to export private key\");\n      return res.json();\n    },\n    onSuccess: (data: { privateKey: string }) => {\n      navigator.clipboard.writeText(data.privateKey);\n      toast({\n        title: \"Private Key Copied\",\n        description: \"Your private key has been copied to clipboard. Keep it safe!\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export private key\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Refresh balance mutation\n  const refreshBalanceMutation = useMutation({\n    mutationFn: async () => {\n      const res = await fetch(\"/api/wallet/balance\", { credentials: \"include\" });\n      if (!res.ok) throw new Error(\"Failed to refresh balance\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Balance Updated\",\n        description: \"Your wallet balance has been refreshed\",\n        duration: 2000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to refresh balance\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Withdraw mutation\n  const withdrawMutation = useMutation({\n    mutationFn: async (data: { recipientAddress: string; amount: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/wallet/withdraw\", data);\n      return await res.json();\n    },\n    onSuccess: (data: { signature: string; newBalance: number; explorerUrl: string }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setWithdrawAmount(\"\");\n      setRecipientAddress(\"\");\n      toast({\n        title: \"Withdrawal Successful\",\n        description: `Transaction: ${data.signature.slice(0, 8)}... New balance: ${data.newBalance.toFixed(4)} SOL`,\n        duration: 5000,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error.message || \"Failed to withdraw SOL\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.metaKey || e.ctrlKey) && e.key === \"k\") {\n        e.preventDefault();\n        document.getElementById(\"global-search\")?.focus();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, []);\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    setMobileMenuOpen(false);\n  };\n\n  const copyAddress = () => {\n    if (user?.wallet?.publicKey) {\n      navigator.clipboard.writeText(user.wallet.publicKey);\n      toast({\n        title: \"Copied\",\n        description: \"Wallet address copied to clipboard\",\n        duration: 2000,\n      });\n    }\n  };\n\n  const exportPrivateKey = () => {\n    exportKeyMutation.mutate();\n  };\n\n  const truncateAddress = (address: string) => {\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\n  };\n\n  const openWalletDialog = (tab: \"deposit\" | \"withdraw\") => {\n    setActiveTab(tab);\n    setWalletDialogOpen(true);\n  };\n\n  const handleWithdraw = () => {\n    if (!recipientAddress || !withdrawAmount) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please enter recipient address and amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    withdrawMutation.mutate({ recipientAddress, amount: withdrawAmount });\n  };\n\n  return (\n    <header className=\"h-14 bg-background border-b border-primary/20 flex items-center justify-between px-6 sticky top-0 z-40\">\n      {/* Left: Logo + Desktop Navigation */}\n      <div className=\"flex items-center gap-6\">\n        <div \n          className=\"w-10 h-10 rounded-none bg-gradient-to-br from-solana-mint via-solana-aqua to-solana-purple flex items-center justify-center cursor-pointer flex-shrink-0 border border-primary/30\"\n          onClick={() => navigate(\"/\")}\n          data-testid=\"logo-home\"\n        >\n          <span className=\"text-sm font-bold text-black\">SL</span>\n        </div>\n        \n        {/* Desktop Horizontal Navigation */}\n        <nav className=\"hidden lg:flex items-center gap-2\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n\n            return (\n              <Button\n                key={item.path}\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => navigate(item.path)}\n                className={`gap-2 border ${isActive ? 'border-primary/50 bg-primary/10 text-primary' : 'border-transparent text-muted-foreground hover:text-foreground hover:border-primary/20'}`}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <Icon className=\"w-3.5 h-3.5\" />\n                <span className=\"text-xs\">[{item.label.toUpperCase()}]</span>\n              </Button>\n            );\n          })}\n        </nav>\n\n        {/* Mobile Menu */}\n        <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"lg:hidden border border-primary/20\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"w-4 h-4\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"w-64 bg-background border-r border-primary/20\">\n            <nav className=\"flex flex-col gap-2 mt-8\">\n              {navItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.path;\n\n                return (\n                  <Button\n                    key={item.path}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleNavigation(item.path)}\n                    className={`justify-start gap-3 border ${isActive ? 'border-primary/50 bg-primary/10 text-primary' : 'border-transparent text-muted-foreground'}`}\n                    data-testid={`nav-mobile-${item.label.toLowerCase()}`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    <span className=\"text-xs\">{item.label.toUpperCase()}</span>\n                  </Button>\n                );\n              })}\n            </nav>\n          </SheetContent>\n        </Sheet>\n      </div>\n\n      {/* Center: Search */}\n      <div className=\"flex-1 max-w-md mx-6 hidden md:block\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-3.5 h-3.5 text-primary/50\" />\n          <Input\n            id=\"global-search\"\n            type=\"search\"\n            placeholder=\"$ SEARCH MARKETS...\"\n            className=\"pl-10 pr-16 bg-background/50 border-primary/20 h-9 text-xs placeholder:text-muted-foreground focus:border-primary/40\"\n            onFocus={() => setSearchFocused(true)}\n            onBlur={() => setSearchFocused(false)}\n            data-testid=\"input-search\"\n          />\n          <kbd className=\"absolute right-3 top-1/2 -translate-y-1/2 px-1.5 py-0.5 text-[10px] text-primary/70 bg-background border border-primary/20\">\n            ^K\n          </kbd>\n        </div>\n      </div>\n\n      {/* Right Section */}\n      <div className=\"flex items-center gap-2\">\n        {/* Network Indicator */}\n        <div\n          className=\"hidden sm:flex items-center gap-2 px-3 py-1.5 bg-transparent border border-primary/30 text-xs\"\n          data-testid=\"badge-network\"\n        >\n          <div className=\"w-1.5 h-1.5 bg-primary animate-pulse\" />\n          <span className=\"text-primary font-mono\">SOLANA</span>\n        </div>\n\n        {/* Notifications */}\n        <Button variant=\"ghost\" size=\"icon\" className=\"relative border border-transparent hover:border-primary/20\" data-testid=\"button-notifications\">\n          <Bell className=\"w-4 h-4\" />\n          <Badge className=\"absolute -top-1 -right-1 w-4 h-4 flex items-center justify-center p-0 bg-transparent border border-destructive text-destructive text-[10px]\">\n            3\n          </Badge>\n        </Button>\n\n        {/* Login / Wallet Display */}\n        {!isAuthenticated ? (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"gap-2 border-primary/30 text-primary hover:bg-primary/10 hover:border-primary/50\"\n            onClick={() => window.location.href = \"/api/login\"}\n            data-testid=\"button-login\"\n          >\n            <User className=\"w-3.5 h-3.5\" />\n            <span className=\"hidden sm:inline text-xs\">LOGIN</span>\n          </Button>\n        ) : (\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"gap-2 border-primary/30 text-primary hover:bg-primary/10 hover:border-primary/50\"\n                data-testid=\"button-wallet-menu\"\n              >\n                <Wallet className=\"w-3.5 h-3.5\" />\n                <span className=\"hidden sm:inline text-xs font-mono\">\n                  {user?.wallet?.publicKey ? truncateAddress(user.wallet.publicKey) : \"WALLET\"}\n                </span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-64 bg-background border-primary/20\">\n              <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n                YOUR WALLET\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator className=\"bg-primary/20\" />\n              \n              {/* Wallet Address */}\n              <div className=\"px-2 py-2 space-y-1\">\n                <div className=\"text-xs text-muted-foreground\">Address</div>\n                <div className=\"text-xs font-mono text-primary\" data-testid=\"text-wallet-address\">\n                  {user?.wallet?.publicKey || \"Loading...\"}\n                </div>\n              </div>\n\n              {/* Balance */}\n              <div className=\"px-2 py-2 space-y-1\">\n                <div className=\"text-xs text-muted-foreground\">Balance</div>\n                <div className=\"text-xs font-mono text-primary\" data-testid=\"text-wallet-balance\">\n                  {user?.wallet?.balance || \"0\"} SOL\n                </div>\n              </div>\n              \n              <DropdownMenuSeparator className=\"bg-primary/20\" />\n              \n              <DropdownMenuItem onClick={() => openWalletDialog(\"deposit\")} className=\"text-xs hover:bg-primary/10\" data-testid=\"menu-deposit\">\n                <Download className=\"w-3.5 h-3.5 mr-2\" />\n                Deposit SOL\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem onClick={() => openWalletDialog(\"withdraw\")} className=\"text-xs hover:bg-primary/10\" data-testid=\"menu-withdraw\">\n                <Upload className=\"w-3.5 h-3.5 mr-2\" />\n                Withdraw SOL\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem onClick={() => refreshBalanceMutation.mutate()} disabled={refreshBalanceMutation.isPending} className=\"text-xs hover:bg-primary/10\" data-testid=\"menu-refresh-balance\">\n                <RefreshCw className={`w-3.5 h-3.5 mr-2 ${refreshBalanceMutation.isPending ? \"animate-spin\" : \"\"}`} />\n                Refresh Balance\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator className=\"bg-primary/20\" />\n              \n              <DropdownMenuItem onClick={copyAddress} className=\"text-xs hover:bg-primary/10\" data-testid=\"menu-copy-address\">\n                <Copy className=\"w-3.5 h-3.5 mr-2\" />\n                Copy Address\n              </DropdownMenuItem>\n              \n              <DropdownMenuItem onClick={exportPrivateKey} className=\"text-xs hover:bg-primary/10\" data-testid=\"menu-export-key\">\n                <Key className=\"w-3.5 h-3.5 mr-2\" />\n                Export Private Key\n              </DropdownMenuItem>\n              \n              <DropdownMenuSeparator className=\"bg-primary/20\" />\n              \n              <DropdownMenuItem\n                onClick={() => window.location.href = \"/api/logout\"}\n                className=\"text-xs text-destructive hover:bg-destructive/10\"\n                data-testid=\"menu-logout\"\n              >\n                <LogOut className=\"w-3.5 h-3.5 mr-2\" />\n                Logout\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        )}\n      </div>\n\n      {/* Wallet Dialog */}\n      <Dialog open={walletDialogOpen} onOpenChange={setWalletDialogOpen}>\n        <DialogContent className=\"bg-background border-primary/20 max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-primary text-xs font-bold\">WALLET.MANAGEMENT</DialogTitle>\n            <DialogDescription className=\"text-muted-foreground text-xs\">\n              &gt; DEPOSIT_OR_WITHDRAW_SOL\n            </DialogDescription>\n          </DialogHeader>\n\n          <Tabs value={activeTab} onValueChange={(v) => setActiveTab(v as \"deposit\" | \"withdraw\")} className=\"mt-4\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-background border border-primary/20\">\n              <TabsTrigger \n                value=\"deposit\" \n                className=\"text-[10px] data-[state=active]:bg-primary/10 data-[state=active]:text-primary\"\n                data-testid=\"tab-deposit\"\n              >\n                [DEPOSIT]\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"withdraw\" \n                className=\"text-[10px] data-[state=active]:bg-primary/10 data-[state=active]:text-primary\"\n                data-testid=\"tab-withdraw\"\n              >\n                [WITHDRAW]\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Deposit Tab */}\n            <TabsContent value=\"deposit\" className=\"space-y-4 mt-4\">\n              <div className=\"p-4 bg-background/50 border border-primary/20 space-y-3\">\n                <div className=\"text-[10px] text-muted-foreground\">\n                  &gt; SEND_SOL_TO_THIS_ADDRESS\n                </div>\n                <div className=\"p-3 bg-background border border-primary/20 break-all\">\n                  <div className=\"text-xs font-mono text-primary\" data-testid=\"text-deposit-address\">\n                    {user?.wallet?.publicKey || \"Loading...\"}\n                  </div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={copyAddress}\n                  className=\"w-full border-primary/30 text-primary hover:bg-primary/10\"\n                  data-testid=\"button-copy-deposit-address\"\n                >\n                  <Copy className=\"w-3.5 h-3.5 mr-2\" />\n                  COPY_ADDRESS\n                </Button>\n              </div>\n              \n              <div className=\"p-3 bg-warning/10 border border-warning/30 text-[10px] text-warning\">\n                &gt; DEVNET_ONLY: Use Solana devnet faucet to get test SOL\n              </div>\n              \n              <div className=\"text-[9px] text-muted-foreground text-center\">\n                &gt; TRANSACTION_CONFIRMATIONS: 2-3 BLOCKS (~1-2 MIN)\n              </div>\n            </TabsContent>\n\n            {/* Withdraw Tab */}\n            <TabsContent value=\"withdraw\" className=\"space-y-4 mt-4\">\n              <div className=\"space-y-3\">\n                <div>\n                  <Label htmlFor=\"recipient-address\" className=\"text-[10px] text-muted-foreground mb-1.5 block\">\n                    RECIPIENT_ADDRESS\n                  </Label>\n                  <Input\n                    id=\"recipient-address\"\n                    type=\"text\"\n                    placeholder=\"Enter Solana address...\"\n                    value={recipientAddress}\n                    onChange={(e) => setRecipientAddress(e.target.value)}\n                    className=\"font-mono text-xs h-9 bg-background border-primary/20\"\n                    data-testid=\"input-recipient-address\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"withdraw-amount\" className=\"text-[10px] text-muted-foreground mb-1.5 block\">\n                    AMOUNT (SOL)\n                  </Label>\n                  <Input\n                    id=\"withdraw-amount\"\n                    type=\"number\"\n                    step=\"0.001\"\n                    placeholder=\"0.00\"\n                    value={withdrawAmount}\n                    onChange={(e) => setWithdrawAmount(e.target.value)}\n                    className=\"font-mono text-sm h-9 bg-background border-primary/20\"\n                    data-testid=\"input-withdraw-amount\"\n                  />\n                  <div className=\"text-[10px] text-muted-foreground mt-1\">\n                    Available: {user?.wallet?.balance || \"0\"} SOL\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-background/50 border border-primary/20 space-y-1.5 text-[10px]\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">EST_FEE</span>\n                    <span className=\"font-mono\" data-numeric=\"true\">~0.00001 SOL</span>\n                  </div>\n                  <div className=\"flex justify-between pt-1.5 border-t border-primary/20\">\n                    <span className=\"text-primary\">TOTAL</span>\n                    <span className=\"font-mono font-bold text-primary\" data-numeric=\"true\">\n                      {withdrawAmount ? (parseFloat(withdrawAmount) + 0.00001).toFixed(5) : \"0.00000\"} SOL\n                    </span>\n                  </div>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleWithdraw}\n                  disabled={!recipientAddress || !withdrawAmount || withdrawMutation.isPending}\n                  className=\"w-full border-primary/30 text-primary hover:bg-primary/10\"\n                  data-testid=\"button-withdraw-submit\"\n                >\n                  {withdrawMutation.isPending ? (\n                    <>\n                      <RefreshCw className=\"w-3.5 h-3.5 mr-2 animate-spin\" />\n                      PROCESSING...\n                    </>\n                  ) : (\n                    \"[WITHDRAW_SOL]\"\n                  )}\n                </Button>\n              </div>\n              \n              <div className=\"text-[9px] text-muted-foreground text-center\">\n                &gt; TRANSACTION_FINALITY: ~30-60 SEC\n              </div>\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n    </header>\n  );\n}\n","size_bytes":20990},"client/src/components/shared/KPIStat.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface KPIStatProps {\n  label: string;\n  value: string | number;\n  change?: number;\n  icon?: LucideIcon;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  className?: string;\n}\n\nexport function KPIStat({ label, value, change, icon: Icon, trend, className = \"\" }: KPIStatProps) {\n  const getTrendColor = () => {\n    if (trend === \"up\" || (change && change > 0)) return \"text-success\";\n    if (trend === \"down\" || (change && change < 0)) return \"text-destructive\";\n    return \"text-muted-foreground\";\n  };\n\n  return (\n    <motion.div\n      className={`flex flex-col gap-1 ${className}`}\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.2 }}\n    >\n      <div className=\"flex items-center gap-2\">\n        {Icon && <Icon className=\"w-3.5 h-3.5 text-muted-foreground\" />}\n        <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">{label}</span>\n      </div>\n      <div className=\"flex items-baseline gap-2\">\n        <span className=\"text-xl font-bold font-mono\" data-numeric=\"true\">{value}</span>\n        {change !== undefined && (\n          <span className={`text-sm font-medium ${getTrendColor()}`}>\n            {change > 0 ? \"+\" : \"\"}{change.toFixed(2)}%\n          </span>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":1375},"client/src/pages/Portfolio.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, EyeOff, Plus, Copy, Archive, RefreshCw } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface Wallet {\n  id: string;\n  name: string;\n  publicKey: string;\n  balance: string;\n  isPrimary: string;\n  isArchived: string;\n  createdAt: string;\n}\n\nexport default function Portfolio() {\n  const { toast } = useToast();\n  const [showArchived, setShowArchived] = useState(false);\n  const [visiblePrivateKeys, setVisiblePrivateKeys] = useState<Record<string, string>>({});\n  const [newWalletName, setNewWalletName] = useState(\"\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  // Fetch all wallets\n  const { data: wallets = [], isLoading: walletsLoading } = useQuery<Wallet[]>({\n    queryKey: [\"/api/wallets\"],\n  });\n\n  // Create wallet mutation\n  const createWalletMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const response = await apiRequest(\"POST\", \"/api/wallets\", { name });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallets\"] });\n      setNewWalletName(\"\");\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Wallet created\",\n        description: \"Your new wallet has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create wallet\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Archive wallet mutation\n  const archiveWalletMutation = useMutation({\n    mutationFn: async ({ walletId, isArchived }: { walletId: string; isArchived: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/wallets/${walletId}`, { isArchived });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallets\"] });\n      toast({\n        title: \"Wallet updated\",\n        description: \"Wallet status has been updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update wallet\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Refresh balance mutation\n  const refreshBalanceMutation = useMutation({\n    mutationFn: async (walletId: string) => {\n      const response = await fetch(`/api/wallets/${walletId}/balance`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to refresh balance\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallets\"] });\n      toast({\n        title: \"Balance refreshed\",\n        description: \"Wallet balance has been updated from the blockchain.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to refresh balance\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Show/hide private key\n  const togglePrivateKey = async (walletId: string) => {\n    if (visiblePrivateKeys[walletId]) {\n      // Hide private key\n      const newKeys = { ...visiblePrivateKeys };\n      delete newKeys[walletId];\n      setVisiblePrivateKeys(newKeys);\n    } else {\n      // Fetch and show private key\n      try {\n        const response = await fetch(`/api/wallets/${walletId}/export-key`, {\n          credentials: \"include\",\n        });\n        const data = await response.json();\n        \n        if (!response.ok) {\n          throw new Error(data.message || \"Failed to export key\");\n        }\n\n        setVisiblePrivateKeys({\n          ...visiblePrivateKeys,\n          [walletId]: data.privateKey,\n        });\n      } catch (error: any) {\n        toast({\n          title: \"Failed to export private key\",\n          description: error.message || \"An error occurred\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  // Copy to clipboard\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied to clipboard\",\n      description: `${label} has been copied to your clipboard.`,\n    });\n  };\n\n  // Filter wallets\n  const displayedWallets = wallets.filter(w => showArchived || w.isArchived === \"false\");\n\n  return (\n    <div className=\"min-h-screen p-6 bg-background\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-mono mb-2\" data-testid=\"heading-portfolio\">Portfolio</h1>\n          <p className=\"text-muted-foreground\">Manage your wallets and positions</p>\n        </div>\n\n        <Tabs defaultValue=\"wallets\" className=\"w-full\">\n          <TabsList className=\"mb-6\" data-testid=\"tabs-portfolio\">\n            <TabsTrigger value=\"spot\" data-testid=\"tab-spot\">Spot</TabsTrigger>\n            <TabsTrigger value=\"wallets\" data-testid=\"tab-wallets\">Wallets</TabsTrigger>\n            <TabsTrigger value=\"perpetuals\" data-testid=\"tab-perpetuals\">Perpetuals</TabsTrigger>\n          </TabsList>\n\n          {/* Spot Tab */}\n          <TabsContent value=\"spot\" data-testid=\"content-spot\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Spot Balances</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-muted-foreground\">\n                  Total SOL Balance: {wallets.reduce((sum, w) => sum + parseFloat(w.balance || \"0\"), 0).toFixed(4)} SOL\n                </div>\n                <Separator className=\"my-4\" />\n                <div className=\"space-y-2\">\n                  {displayedWallets.map((wallet) => (\n                    <div key={wallet.id} className=\"flex items-center justify-between p-3 rounded-md bg-card/50 border\">\n                      <div>\n                        <div className=\"font-medium\">{wallet.name}</div>\n                        <div className=\"text-sm text-muted-foreground font-mono\">{wallet.publicKey.slice(0, 8)}...{wallet.publicKey.slice(-8)}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-mono\" data-numeric=\"true\">{parseFloat(wallet.balance || \"0\").toFixed(4)} SOL</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Wallets Tab */}\n          <TabsContent value=\"wallets\" data-testid=\"content-wallets\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n                <CardTitle>Your Wallets</CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowArchived(!showArchived)}\n                    data-testid=\"button-toggle-archived\"\n                  >\n                    {showArchived ? \"Hide Archived\" : \"Show Archived\"}\n                  </Button>\n                  <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" data-testid=\"button-create-wallet\">\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Create Wallet\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent data-testid=\"dialog-create-wallet\">\n                      <DialogHeader>\n                        <DialogTitle>Create New Wallet</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4 pt-4\">\n                        <div>\n                          <Label htmlFor=\"wallet-name\">Wallet Name</Label>\n                          <Input\n                            id=\"wallet-name\"\n                            placeholder=\"e.g., Trading Wallet\"\n                            value={newWalletName}\n                            onChange={(e) => setNewWalletName(e.target.value)}\n                            data-testid=\"input-wallet-name\"\n                          />\n                        </div>\n                        <Button\n                          onClick={() => createWalletMutation.mutate(newWalletName)}\n                          disabled={!newWalletName || createWalletMutation.isPending}\n                          className=\"w-full\"\n                          data-testid=\"button-confirm-create\"\n                        >\n                          {createWalletMutation.isPending ? \"Creating...\" : \"Create Wallet\"}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {walletsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading wallets...</div>\n                ) : displayedWallets.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    {showArchived ? \"No wallets found\" : \"No active wallets\"}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {displayedWallets.map((wallet) => (\n                      <Card key={wallet.id} className={wallet.isArchived === \"true\" ? \"opacity-60\" : \"\"} data-testid={`card-wallet-${wallet.id}`}>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <span className=\"font-medium\" data-testid={`text-wallet-name-${wallet.id}`}>{wallet.name}</span>\n                                {wallet.isPrimary === \"true\" && (\n                                  <Badge variant=\"default\" data-testid={`badge-primary-${wallet.id}`}>Primary</Badge>\n                                )}\n                                {wallet.isArchived === \"true\" && (\n                                  <Badge variant=\"secondary\" data-testid={`badge-archived-${wallet.id}`}>Archived</Badge>\n                                )}\n                              </div>\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-muted-foreground\">Balance:</span>\n                                  <span className=\"font-mono\" data-numeric=\"true\" data-testid={`text-balance-${wallet.id}`}>\n                                    {parseFloat(wallet.balance || \"0\").toFixed(4)} SOL\n                                  </span>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    className=\"h-6 w-6\"\n                                    onClick={() => refreshBalanceMutation.mutate(wallet.id)}\n                                    disabled={refreshBalanceMutation.isPending}\n                                    data-testid={`button-refresh-${wallet.id}`}\n                                  >\n                                    <RefreshCw className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"text-muted-foreground\">Public Key:</span>\n                                  <code className=\"text-xs font-mono\" data-testid={`text-publickey-${wallet.id}`}>\n                                    {wallet.publicKey}\n                                  </code>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"icon\"\n                                    className=\"h-6 w-6\"\n                                    onClick={() => copyToClipboard(wallet.publicKey, \"Public key\")}\n                                    data-testid={`button-copy-publickey-${wallet.id}`}\n                                  >\n                                    <Copy className=\"w-3 h-3\" />\n                                  </Button>\n                                </div>\n                                {visiblePrivateKeys[wallet.id] && (\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-muted-foreground\">Private Key:</span>\n                                    <code className=\"text-xs font-mono text-destructive\" data-testid={`text-privatekey-${wallet.id}`}>\n                                      {visiblePrivateKeys[wallet.id]}\n                                    </code>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"h-6 w-6\"\n                                      onClick={() => copyToClipboard(visiblePrivateKeys[wallet.id], \"Private key\")}\n                                      data-testid={`button-copy-privatekey-${wallet.id}`}\n                                    >\n                                      <Copy className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => togglePrivateKey(wallet.id)}\n                              data-testid={`button-toggle-privatekey-${wallet.id}`}\n                            >\n                              {visiblePrivateKeys[wallet.id] ? (\n                                <>\n                                  <EyeOff className=\"w-4 h-4 mr-1\" />\n                                  Hide Private Key\n                                </>\n                              ) : (\n                                <>\n                                  <Eye className=\"w-4 h-4 mr-1\" />\n                                  Show Private Key\n                                </>\n                              )}\n                            </Button>\n                            {wallet.isPrimary !== \"true\" && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() =>\n                                  archiveWalletMutation.mutate({\n                                    walletId: wallet.id,\n                                    isArchived: wallet.isArchived === \"true\" ? \"false\" : \"true\",\n                                  })\n                                }\n                                disabled={archiveWalletMutation.isPending}\n                                data-testid={`button-archive-${wallet.id}`}\n                              >\n                                <Archive className=\"w-4 h-4 mr-1\" />\n                                {wallet.isArchived === \"true\" ? \"Unarchive\" : \"Archive\"}\n                              </Button>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Perpetuals Tab */}\n          <TabsContent value=\"perpetuals\" data-testid=\"content-perpetuals\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Open Positions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  No open positions\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16984},"client/src/percolator/connection.ts":{"content":"/**\n * Percolator Connection Manager\n * RPC connection and priority fee helpers\n */\n\nimport { Connection, Commitment, ConnectionConfig } from \"@solana/web3.js\";\n\n// Environment variables\nconst RPC_URL = import.meta.env.VITE_SOLANA_RPC || \"https://api.mainnet-beta.solana.com\";\nconst WS_URL = import.meta.env.VITE_SOLANA_WS || \"wss://api.mainnet-beta.solana.com\";\n\n// Connection config\nconst COMMITMENT: Commitment = \"confirmed\";\nconst CONFIG: ConnectionConfig = {\n  commitment: COMMITMENT,\n  wsEndpoint: WS_URL,\n};\n\n/**\n * Global Solana connection instance\n */\nexport const connection = new Connection(RPC_URL, CONFIG);\n\n/**\n * Get recommended priority fee for transactions\n * Uses recent prioritization fees to estimate\n */\nexport async function getPriorityFee(): Promise<number> {\n  try {\n    // Get recent prioritization fees\n    const fees = await connection.getRecentPrioritizationFees();\n    \n    if (fees.length === 0) {\n      return 1000; // Default: 1000 micro-lamports\n    }\n\n    // Calculate 75th percentile for reliable confirmation\n    const sorted = fees\n      .map(f => f.prioritizationFee)\n      .sort((a, b) => a - b);\n    \n    const p75Index = Math.floor(sorted.length * 0.75);\n    const p75Fee = sorted[p75Index] || 1000;\n\n    // Minimum of 1000, maximum of 100000 micro-lamports\n    return Math.max(1000, Math.min(100000, p75Fee));\n  } catch (error) {\n    console.error(\"Failed to get priority fee:\", error);\n    return 5000; // Fallback: 5000 micro-lamports\n  }\n}\n\n/**\n * Get current slot\n */\nexport async function getCurrentSlot(): Promise<number> {\n  return await connection.getSlot(COMMITMENT);\n}\n\n/**\n * Get current block time\n */\nexport async function getCurrentBlockTime(): Promise<number> {\n  const slot = await getCurrentSlot();\n  const blockTime = await connection.getBlockTime(slot);\n  return blockTime || Math.floor(Date.now() / 1000);\n}\n\n/**\n * Wait for transaction confirmation\n */\nexport async function confirmTransaction(signature: string): Promise<boolean> {\n  try {\n    const result = await connection.confirmTransaction(signature, COMMITMENT);\n    return !result.value.err;\n  } catch (error) {\n    console.error(\"Transaction confirmation failed:\", error);\n    return false;\n  }\n}\n\n/**\n * Get connection health status\n */\nexport async function getConnectionHealth(): Promise<{\n  healthy: boolean;\n  slot: number;\n  blockTime: number;\n}> {\n  try {\n    const slot = await getCurrentSlot();\n    const blockTime = await getCurrentBlockTime();\n    return {\n      healthy: true,\n      slot,\n      blockTime,\n    };\n  } catch (error) {\n    return {\n      healthy: false,\n      slot: 0,\n      blockTime: 0,\n    };\n  }\n}\n","size_bytes":2650},"client/src/percolator/flows.ts":{"content":"/**\n * Percolator High-Level Trading Flows\n * Composite operations that combine multiple transactions\n */\n\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\nimport * as router from \"./router\";\nimport * as slab from \"./slab\";\nimport {\n  Side,\n  toFixed,\n  type PlaceOrderParams,\n  type SlabHeader,\n  type TransactionResult,\n} from \"./types\";\nimport { connection } from \"./connection\";\nimport { findSlabStatePda, findCapPda, findEscrowPda } from \"./pdas\";\n\n/**\n * Place a perpetual order - full flow\n * \n * Steps:\n * 1. Reserve order on slab (creates hold receipt)\n * 2. Mint cap token (spending authorization)\n * 3. Commit order using cap\n * 4. On failure: cancel hold\n */\nexport async function placePerpOrder(\n  params: PlaceOrderParams,\n  user: PublicKey,\n  slabAddress: PublicKey,\n  quoteMint: PublicKey\n): Promise<TransactionResult> {\n  try {\n    // Convert to fixed-point\n    const quantity = toFixed(params.quantity);\n    const limitPrice = params.limitPrice ? toFixed(params.limitPrice) : BigInt(0);\n\n    // Step 1: Reserve order\n    const holdId = PublicKey.unique();\n    const commitmentHash = Buffer.from(crypto.getRandomValues(new Uint8Array(32)));\n\n    const reserveTx = await slab.reserve(\n      {\n        routeId: slabAddress,\n        instrumentIndex: 0,  // TODO: Map market symbol to instrument index\n        side: params.side,\n        quantity,\n        limitPrice,\n        ttlMs: 60000,  // 60 second hold\n        commitmentHash,\n      },\n      user,\n      user\n    );\n\n    // Step 2: Mint cap token\n    const nonce = BigInt(Date.now());\n    const capTx = await router.mintCap(\n      {\n        user,\n        slab: slabAddress,\n        mint: quoteMint,\n        amountMax: quantity,  // Max spend amount\n        ttlMs: 120000,  // 120 second cap (max allowed)\n      },\n      user\n    );\n\n    const [cap] = findCapPda(user, slabAddress, quoteMint, nonce);\n\n    // Step 3: Commit order\n    const commitTx = await slab.commit(\n      {\n        holdId,\n        cap,\n      },\n      user,\n      user\n    );\n\n    // TODO: Sign and send transactions in sequence\n    // For now, return placeholder\n    console.warn(\"Order flow prepared but requires wallet integration\");\n\n    return {\n      signature: \"placeholder\",\n      success: false,\n      error: \"Wallet integration required - use Solana wallet adapter\",\n    };\n  } catch (error) {\n    // On failure, attempt to cancel hold\n    // TODO: Implement cancel flow\n\n    return {\n      signature: \"\",\n      success: false,\n      error: error instanceof Error ? error.message : \"Order placement failed\",\n    };\n  }\n}\n\n/**\n * Check warmup guards for a market\n * Enforces long-only and short leverage caps during warmup\n */\nexport async function checkWarmupGuards(\n  slabAddress: PublicKey,\n  side: Side,\n  leverage: number\n): Promise<{\n  allowed: boolean;\n  reason?: string;\n}> {\n  try {\n    // Fetch slab header\n    const [slabState] = findSlabStatePda(slabAddress);\n    const accountInfo = await connection.getAccountInfo(slabState);\n\n    if (!accountInfo) {\n      return {\n        allowed: false,\n        reason: \"Market not found\",\n      };\n    }\n\n    // TODO: Deserialize slab header to get warmup config\n    // For now, return mock data\n    const warmupEnabled = false;  // Parse from account data\n    const shortEnabled = true;  // Parse from account data\n    const shortLeverageCap = 5;  // Parse from account data\n\n    if (warmupEnabled) {\n      if (side === Side.Ask && !shortEnabled) {\n        return {\n          allowed: false,\n          reason: \"Shorts disabled during warmup period\",\n        };\n      }\n\n      if (side === Side.Ask && leverage > shortLeverageCap) {\n        return {\n          allowed: false,\n          reason: `Short leverage capped at ${shortLeverageCap}x during warmup`,\n        };\n      }\n    }\n\n    return {\n      allowed: true,\n    };\n  } catch (error) {\n    return {\n      allowed: false,\n      reason: error instanceof Error ? error.message : \"Failed to check warmup guards\",\n    };\n  }\n}\n\n/**\n * Validate cap token hasn't expired\n */\nexport function validateCapExpiry(expiryTimestamp: number): boolean {\n  const now = Math.floor(Date.now() / 1000);\n  return now < expiryTimestamp;\n}\n\n/**\n * Validate debit doesn't exceed cap remaining\n */\nexport function validateCapDebit(\n  debit: bigint,\n  capMax: bigint,\n  capUsed: bigint\n): boolean {\n  const remaining = capMax - capUsed;\n  return debit <= remaining;\n}\n\n/**\n * Check if price is within allowed bands\n */\nexport function validatePriceBands(\n  price: bigint,\n  oraclePrice: bigint,\n  bandBps: number\n): boolean {\n  const bandMultiplier = BigInt(10000 + bandBps) / BigInt(10000);\n  const upperBand = (oraclePrice * bandMultiplier) / BigInt(10000);\n  const lowerBand = (oraclePrice * BigInt(10000)) / bandMultiplier;\n\n  return price >= lowerBand && price <= upperBand;\n}\n\n/**\n * Calculate required margin for a position\n */\nexport function calculateRequiredMargin(\n  positionValue: bigint,\n  initialMarginBps: number\n): bigint {\n  return (positionValue * BigInt(initialMarginBps)) / BigInt(10000);\n}\n\n/**\n * Calculate liquidation price for a position\n */\nexport function calculateLiquidationPrice(\n  entryPrice: bigint,\n  leverage: number,\n  side: Side,\n  maintenanceMarginBps: number\n): bigint {\n  const mmFactor = BigInt(maintenanceMarginBps) / BigInt(10000);\n  \n  if (side === Side.Bid) {\n    // Long position: liq price = entry * (1 - mm%)\n    return (entryPrice * (BigInt(10000) - mmFactor)) / BigInt(10000);\n  } else {\n    // Short position: liq price = entry * (1 + mm%)\n    return (entryPrice * (BigInt(10000) + mmFactor)) / BigInt(10000);\n  }\n}\n","size_bytes":5603},"client/src/percolator/index.ts":{"content":"/**\n * Percolator SDK - Solana Perpetuals Trading\n * \n * Main entry point for the Percolator TypeScript client SDK\n * Exports all modules for interacting with Router and Slab programs\n */\n\n// Core connection and utilities\nexport * from \"./connection\";\nexport * from \"./types\";\nexport * from \"./pdas\";\n\n// Transaction builders\nexport * as router from \"./router\";\nexport * as slab from \"./slab\";\n\n// High-level trading flows\nexport * from \"./flows\";\n\n// Program IDs\nexport { ROUTER_PROGRAM_ID, SLAB_PROGRAM_ID } from \"./pdas\";\n","size_bytes":525},"client/src/percolator/types.ts":{"content":"/**\n * Percolator SDK Types\n * Fixed-point arithmetic, enums, and core data structures\n */\n\nimport { PublicKey } from \"@solana/web3.js\";\n\n// ===== Enums =====\n\nexport enum Side {\n  Bid = 0,\n  Ask = 1,\n}\n\nexport enum TimeInForce {\n  GTC = 0,  // Good Till Cancel\n  IOC = 1,  // Immediate or Cancel\n  FOK = 2,  // Fill or Kill\n  POST = 3, // Post Only\n}\n\nexport enum MakerClass {\n  Market = 0,\n  Limit = 1,\n  PostOnly = 2,\n}\n\nexport enum MarketStatus {\n  Active = 0,\n  Warmup = 1,\n  Frozen = 2,\n  Settled = 3,\n}\n\n// ===== Fixed-Point Helpers (6 decimals) =====\n\nexport const DECIMALS = 6;\nexport const SCALE = 10 ** DECIMALS;\n\n/**\n * Convert a float to fixed-point integer (6 decimals)\n */\nexport function toFixed(value: number): bigint {\n  return BigInt(Math.floor(value * SCALE));\n}\n\n/**\n * Convert fixed-point integer back to float\n */\nexport function fromFixed(value: bigint | number): number {\n  return Number(value) / SCALE;\n}\n\n/**\n * Format fixed-point value for display\n */\nexport function formatFixed(value: bigint | number, decimals: number = 6): string {\n  return fromFixed(value).toFixed(decimals);\n}\n\n// ===== Core Data Structures =====\n\nexport interface RiskParams {\n  initialMarginBps: number;  // Initial margin requirement (bps)\n  maintenanceMarginBps: number;  // Maintenance margin requirement (bps)\n  bandBps: number;  // Price band width (bps)\n  fundingCapBps: number;  // Max funding rate (bps)\n  maxLeverage: number;  // Maximum leverage allowed\n  openInterestCap: bigint;  // Max open interest\n}\n\nexport interface WarmupConfig {\n  enabled: boolean;\n  shortEnabled: boolean;\n  shortLeverageCap: number;\n  endTimestamp: number;\n}\n\nexport interface InstrumentConfig {\n  symbol: string;\n  tickSize: bigint;  // Minimum price increment\n  lotSize: bigint;  // Minimum size increment\n  contractSize: bigint;  // Contract multiplier\n}\n\nexport interface SlabHeader {\n  marketId: PublicKey;\n  authority: PublicKey;\n  status: MarketStatus;\n  risk: RiskParams;\n  warmup: WarmupConfig;\n  instruments: InstrumentConfig[];\n  lastFundingTimestamp: number;\n  openInterest: bigint;\n}\n\nexport interface HoldReceipt {\n  holdId: PublicKey;\n  trader: PublicKey;\n  instrumentIndex: number;\n  side: Side;\n  quantity: bigint;\n  limitPrice: bigint;\n  expiryTimestamp: number;\n  commitmentHash: Buffer;\n}\n\nexport interface CapToken {\n  user: PublicKey;\n  slab: PublicKey;\n  mint: PublicKey;\n  amountMax: bigint;\n  amountUsed: bigint;\n  expiryTimestamp: number;\n  nonce: bigint;\n}\n\nexport interface Position {\n  trader: PublicKey;\n  instrumentIndex: number;\n  size: bigint;  // Signed: positive = long, negative = short\n  entryPrice: bigint;\n  margin: bigint;\n  unrealizedPnl: bigint;\n  lastFundingIndex: number;\n}\n\nexport interface OracleData {\n  nowcast: bigint;  // Current price estimate\n  realized: bigint;  // Realized price (TWAP)\n  validFrom: number;  // Unix timestamp\n  validTo: number;  // Unix timestamp\n}\n\n// ===== Transaction Parameters =====\n\nexport interface CreateMarketParams {\n  marketId: PublicKey;\n  authority: PublicKey;\n  quoteMint: PublicKey;\n  risk: RiskParams;\n  warmup?: WarmupConfig;\n}\n\nexport interface MintCapParams {\n  user: PublicKey;\n  slab: PublicKey;\n  mint: PublicKey;\n  amountMax: bigint;\n  ttlMs: number;  // Time to live in milliseconds (max 120000)\n}\n\nexport interface ReserveParams {\n  routeId: PublicKey;\n  instrumentIndex: number;\n  side: Side;\n  quantity: bigint;\n  limitPrice: bigint;\n  ttlMs: number;\n  commitmentHash: Buffer;\n}\n\nexport interface CommitParams {\n  holdId: PublicKey;\n  cap: PublicKey;\n}\n\nexport interface PlaceOrderParams {\n  marketId: string;  // Market symbol\n  side: Side;\n  quantity: number;  // In base units\n  limitPrice?: number;  // Optional for market orders\n  timeInForce?: TimeInForce;\n}\n\n// ===== Utility Types =====\n\nexport interface TransactionResult {\n  signature: string;\n  success: boolean;\n  error?: string;\n}\n\nexport interface MarketData {\n  header: SlabHeader;\n  orderbook: {\n    bids: Array<{ price: bigint; size: bigint }>;\n    asks: Array<{ price: bigint; size: bigint }>;\n  };\n  recentTrades: Array<{\n    price: bigint;\n    size: bigint;\n    side: Side;\n    timestamp: number;\n  }>;\n}\n","size_bytes":4165},"client/src/percolator/slab.ts":{"content":"/**\n * Percolator Slab Transaction Builders\n * Creates transactions for order placement, instrument management, liquidations\n */\n\nimport {\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  findSlabStatePda,\n  findSlabAuthorityPda,\n  findHoldPda,\n  findPositionPda,\n  SLAB_PROGRAM_ID,\n} from \"./pdas\";\nimport type {\n  RiskParams,\n  InstrumentConfig,\n  ReserveParams,\n  CommitParams,\n  Side,\n} from \"./types\";\nimport { toFixed } from \"./types\";\nimport { connection } from \"./connection\";\n\n/**\n * IMPORTANT: All transaction builders return unsigned transactions with\n * placeholder serialization. Actual parameter serialization requires the\n * Percolator program IDL or layout documentation.\n * \n * Current status: Stubs for transaction structure only.\n * TODO: Replace placeholder buffers with proper borsh/bincode serialization\n * matching the deployed Percolator programs.\n */\n\n// Instruction discriminators (to be finalized based on actual program)\nconst DISCRIMINATORS = {\n  INIT_SLAB: 0,\n  ADD_INSTRUMENT: 1,\n  RESERVE: 2,\n  COMMIT: 3,\n  CANCEL: 4,\n  BATCH_OPEN: 5,\n  FUNDING_TICK: 6,\n  POST_ORACLE: 7,\n  LIQUIDATE: 8,\n};\n\n/**\n * Initialize a new slab (10MB account for orderbook)\n * \n * NOTE: The PDA account creation is handled by the program using invoke_signed.\n * Client cannot create PDA accounts with SystemProgram.createAccount since\n * PDAs don't have private keys to sign transactions.\n */\nexport async function initSlab(\n  marketId: PublicKey,\n  authority: PublicKey,\n  risk: RiskParams,\n  antiToxicity: boolean,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  // Find slab state PDA (program will create this account)\n  const [slabState] = findSlabStatePda(marketId);\n  const [slabAuthority] = findSlabAuthorityPda(slabState);\n\n  // TODO: Serialize risk params and config based on actual Percolator program layout\n  // Awaiting IDL/program documentation for proper serialization format\n  const data = Buffer.alloc(512);\n  data.writeUInt8(DISCRIMINATORS.INIT_SLAB, 0);\n  // Serialization format:\n  // - authority (32 bytes)\n  // - initial_margin_bps (2 bytes)\n  // - maintenance_margin_bps (2 bytes)\n  // - band_bps (2 bytes)\n  // - funding_cap_bps (2 bytes)\n  // - max_leverage (1 byte)\n  // - open_interest_cap (8 bytes)\n  // - anti_toxicity flag (1 byte)\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: marketId, isSigner: false, isWritable: false },\n      { pubkey: authority, isSigner: false, isWritable: false },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n      { pubkey: slabAuthority, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Add an instrument (tradeable contract) to a slab\n */\nexport async function addInstrument(\n  marketId: PublicKey,\n  config: InstrumentConfig,\n  authority: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [slabState] = findSlabStatePda(marketId);\n\n  // TODO: Serialize instrument config\n  const data = Buffer.alloc(256);\n  data.writeUInt8(DISCRIMINATORS.ADD_INSTRUMENT, 0);\n  // Add symbol, tickSize, lotSize, contractSize...\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: authority, isSigner: true, isWritable: false },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Reserve an order (pre-commit hold)\n * Creates a hold receipt with commitment hash\n */\nexport async function reserve(\n  params: ReserveParams,\n  trader: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const expiryTimestamp = Math.floor(Date.now() / 1000) + Math.floor(params.ttlMs / 1000);\n  \n  // Generate unique hold ID\n  const holdId = PublicKey.unique();\n  const [hold] = findHoldPda(holdId);\n  const [slabState] = findSlabStatePda(params.routeId);\n\n  // TODO: Serialize reserve params\n  const data = Buffer.alloc(256);\n  data.writeUInt8(DISCRIMINATORS.RESERVE, 0);\n  // Add instrumentIndex, side, quantity, limitPrice, ttl, commitmentHash...\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: trader, isSigner: false, isWritable: false },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n      { pubkey: hold, isSigner: false, isWritable: true },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Commit a reserved order using a cap token\n */\nexport async function commit(\n  params: CommitParams,\n  trader: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [hold] = findHoldPda(params.holdId);\n\n  // TODO: Serialize commit params\n  const data = Buffer.alloc(128);\n  data.writeUInt8(DISCRIMINATORS.COMMIT, 0);\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: trader, isSigner: false, isWritable: true },\n      { pubkey: hold, isSigner: false, isWritable: true },\n      { pubkey: params.cap, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Cancel a reserved order\n */\nexport async function cancel(\n  holdId: PublicKey,\n  trader: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [hold] = findHoldPda(holdId);\n\n  const data = Buffer.alloc(64);\n  data.writeUInt8(DISCRIMINATORS.CANCEL, 0);\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: trader, isSigner: false, isWritable: true },\n      { pubkey: hold, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Batch open orders for an instrument\n * Matches pending holds and creates positions\n */\nexport async function batchOpen(\n  marketId: PublicKey,\n  instrumentIndex: number,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [slabState] = findSlabStatePda(marketId);\n\n  const data = Buffer.alloc(32);\n  data.writeUInt8(DISCRIMINATORS.BATCH_OPEN, 0);\n  data.writeUInt16LE(instrumentIndex, 1);\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Tick funding rate for an instrument\n */\nexport async function fundingTick(\n  marketId: PublicKey,\n  instrumentIndex: number,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [slabState] = findSlabStatePda(marketId);\n\n  const data = Buffer.alloc(32);\n  data.writeUInt8(DISCRIMINATORS.FUNDING_TICK, 0);\n  data.writeUInt16LE(instrumentIndex, 1);\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: false },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Post oracle price data\n */\nexport async function postOracle(\n  marketId: PublicKey,\n  nowcast: bigint,\n  realized: bigint,\n  validFrom: number,\n  validTo: number,\n  oracle: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [slabState] = findSlabStatePda(marketId);\n\n  const data = Buffer.alloc(128);\n  data.writeUInt8(DISCRIMINATORS.POST_ORACLE, 0);\n  // Add nowcast, realized, validFrom, validTo...\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: oracle, isSigner: true, isWritable: false },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Liquidate an undercollateralized position\n */\nexport async function liquidate(\n  marketId: PublicKey,\n  trader: PublicKey,\n  instrumentIndex: number,\n  size: bigint,\n  side: Side,\n  liquidator: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const [slabState] = findSlabStatePda(marketId);\n  const [position] = findPositionPda(trader, slabState, instrumentIndex);\n\n  const data = Buffer.alloc(128);\n  data.writeUInt8(DISCRIMINATORS.LIQUIDATE, 0);\n  // Add size, side...\n\n  const ix = new TransactionInstruction({\n    programId: SLAB_PROGRAM_ID,\n    keys: [\n      { pubkey: liquidator, isSigner: true, isWritable: true },\n      { pubkey: trader, isSigner: false, isWritable: true },\n      { pubkey: slabState, isSigner: false, isWritable: true },\n      { pubkey: position, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n","size_bytes":9267},"client/src/percolator/router.ts":{"content":"/**\n * Percolator Router Transaction Builders\n * Creates transactions for market creation, cap minting, funding settlement\n */\n\nimport {\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport {\n  findVaultPda,\n  findEscrowPda,\n  findCapPda,\n  findPortfolioPda,\n  findRegistryPda,\n  ROUTER_PROGRAM_ID,\n} from \"./pdas\";\nimport type {  CreateMarketParams,\n  MintCapParams,\n  TransactionResult,\n} from \"./types\";\nimport { connection, getPriorityFee } from \"./connection\";\n\n/**\n * IMPORTANT: All transaction builders return unsigned transactions with\n * placeholder serialization. Actual parameter serialization requires the\n * Percolator program IDL or layout documentation.\n * \n * Current status: Stubs for transaction structure only.\n * TODO: Replace placeholder buffers with proper borsh/bincode serialization\n * matching the deployed Percolator programs.\n */\n\n// Instruction discriminators (to be finalized based on actual program)\nconst DISCRIMINATORS = {\n  CREATE_MARKET: 0,\n  MINT_CAP: 1,\n  SETTLE_FUNDING: 2,\n  FREEZE_MARKET: 3,\n  UNFREEZE_MARKET: 4,\n};\n\n/**\n * Create a new market\n */\nexport async function createMarket(\n  params: CreateMarketParams,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  // Find PDAs\n  const [registry] = findRegistryPda();\n  const [vault] = findVaultPda(params.quoteMint);\n\n  // TODO: Serialize instruction data based on actual program layout\n  // This is a placeholder structure\n  const data = Buffer.alloc(256);\n  data.writeUInt8(DISCRIMINATORS.CREATE_MARKET, 0);\n  // Add serialized params...\n\n  const ix = new TransactionInstruction({\n    programId: ROUTER_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: params.marketId, isSigner: false, isWritable: true },\n      { pubkey: params.authority, isSigner: false, isWritable: false },\n      { pubkey: registry, isSigner: false, isWritable: true },\n      { pubkey: vault, isSigner: false, isWritable: true },\n      { pubkey: params.quoteMint, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  // Add priority fee\n  const priorityFee = await getPriorityFee();\n  tx.add(\n    SystemProgram.transfer({\n      fromPubkey: payer,\n      toPubkey: payer,  // Dummy transfer for priority fee\n      lamports: priorityFee,\n    })\n  );\n\n  return tx;\n}\n\n/**\n * Mint a cap token (time-limited spending authorization)\n * Max TTL: 120000ms (120 seconds)\n */\nexport async function mintCap(\n  params: MintCapParams,\n  payer: PublicKey\n): Promise<Transaction> {\n  // Enforce max TTL\n  const ttl = Math.min(params.ttlMs, 120000);\n  const expiryTimestamp = Math.floor(Date.now() / 1000) + Math.floor(ttl / 1000);\n\n  // Generate nonce for unique cap PDA\n  const nonce = BigInt(Date.now());\n\n  // Find PDAs\n  const [escrow] = findEscrowPda(params.user, params.slab, params.mint);\n  const [cap] = findCapPda(params.user, params.slab, params.mint, nonce);\n  const [portfolio] = findPortfolioPda(params.user);\n\n  const tx = new Transaction();\n\n  // TODO: Serialize instruction data\n  const data = Buffer.alloc(128);\n  data.writeUInt8(DISCRIMINATORS.MINT_CAP, 0);\n  // Add amountMax, expiryTimestamp, nonce...\n\n  const ix = new TransactionInstruction({\n    programId: ROUTER_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: params.user, isSigner: false, isWritable: false },\n      { pubkey: params.slab, isSigner: false, isWritable: false },\n      { pubkey: escrow, isSigner: false, isWritable: true },\n      { pubkey: cap, isSigner: false, isWritable: true },\n      { pubkey: portfolio, isSigner: false, isWritable: true },\n      { pubkey: params.mint, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Settle funding payment for a trader\n */\nexport async function settleFunding(\n  trader: PublicKey,\n  amount: bigint,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  // TODO: Add actual instruction\n  const data = Buffer.alloc(64);\n  data.writeUInt8(DISCRIMINATORS.SETTLE_FUNDING, 0);\n\n  const ix = new TransactionInstruction({\n    programId: ROUTER_PROGRAM_ID,\n    keys: [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: trader, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Freeze a market (emergency stop)\n */\nexport async function freezeMarket(\n  marketId: PublicKey,\n  authority: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const data = Buffer.alloc(32);\n  data.writeUInt8(DISCRIMINATORS.FREEZE_MARKET, 0);\n\n  const ix = new TransactionInstruction({\n    programId: ROUTER_PROGRAM_ID,\n    keys: [\n      { pubkey: authority, isSigner: true, isWritable: false },\n      { pubkey: marketId, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Unfreeze a market\n */\nexport async function unfreezeMarket(\n  marketId: PublicKey,\n  authority: PublicKey,\n  payer: PublicKey\n): Promise<Transaction> {\n  const tx = new Transaction();\n\n  const data = Buffer.alloc(32);\n  data.writeUInt8(DISCRIMINATORS.UNFREEZE_MARKET, 0);\n\n  const ix = new TransactionInstruction({\n    programId: ROUTER_PROGRAM_ID,\n    keys: [\n      { pubkey: authority, isSigner: true, isWritable: false },\n      { pubkey: marketId, isSigner: false, isWritable: true },\n    ],\n    data,\n  });\n\n  tx.add(ix);\n\n  return tx;\n}\n\n/**\n * Send and confirm a transaction\n */\nexport async function sendAndConfirm(\n  tx: Transaction,\n  payer: PublicKey\n): Promise<TransactionResult> {\n  try {\n    // Get recent blockhash\n    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();\n    tx.recentBlockhash = blockhash;\n    tx.feePayer = payer;\n\n    // Sign and send\n    // NOTE: In production, this would use wallet adapter for signing\n    // For now, this is a placeholder that assumes external signing\n    \n    console.warn(\"Transaction prepared but requires wallet signing\");\n    \n    return {\n      signature: \"placeholder_signature\",\n      success: false,\n      error: \"Wallet signing not implemented - integrate with Solana wallet adapter\",\n    };\n  } catch (error) {\n    return {\n      signature: \"\",\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n  }\n}\n","size_bytes":6667},"client/src/percolator/pdas.ts":{"content":"/**\n * Percolator PDA (Program Derived Address) Helpers\n * All PDAs for Router and Slab programs\n */\n\nimport { PublicKey } from \"@solana/web3.js\";\n\n// Program IDs from environment\nexport const ROUTER_PROGRAM_ID = new PublicKey(\n  import.meta.env.VITE_ROUTER_ID || \"RoutR1VdCpHqj89WEMJhb6TkGT9cPfr1rVjhM3e2YQr\"\n);\n\nexport const SLAB_PROGRAM_ID = new PublicKey(\n  import.meta.env.VITE_SLAB_CODE_HASH || \"SLabZ6PsDLh2X6HzEoqxFDMqCVcJXDKCNEYuPzUvGPk\"\n);\n\n/**\n * Find vault PDA for a given mint\n * Seeds: [b\"vault\", mint]\n */\nexport function findVaultPda(mint: PublicKey): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"vault\"), mint.toBuffer()],\n    ROUTER_PROGRAM_ID\n  );\n}\n\n/**\n * Find escrow PDA for user, slab, and mint\n * Seeds: [b\"escrow\", user, slab, mint]\n */\nexport function findEscrowPda(\n  user: PublicKey,\n  slab: PublicKey,\n  mint: PublicKey\n): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"escrow\"),\n      user.toBuffer(),\n      slab.toBuffer(),\n      mint.toBuffer(),\n    ],\n    ROUTER_PROGRAM_ID\n  );\n}\n\n/**\n * Find cap PDA for user, slab, mint, and nonce\n * Seeds: [b\"cap\", user, slab, mint, nonce_u64]\n */\nexport function findCapPda(\n  user: PublicKey,\n  slab: PublicKey,\n  mint: PublicKey,\n  nonce: bigint\n): [PublicKey, number] {\n  const nonceBuffer = Buffer.allocUnsafe(8);\n  nonceBuffer.writeBigUInt64LE(nonce);\n\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"cap\"),\n      user.toBuffer(),\n      slab.toBuffer(),\n      mint.toBuffer(),\n      nonceBuffer,\n    ],\n    ROUTER_PROGRAM_ID\n  );\n}\n\n/**\n * Find portfolio PDA for a user\n * Seeds: [b\"portfolio\", user]\n */\nexport function findPortfolioPda(user: PublicKey): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"portfolio\"), user.toBuffer()],\n    ROUTER_PROGRAM_ID\n  );\n}\n\n/**\n * Find registry PDA (global)\n * Seeds: [b\"registry\"]\n */\nexport function findRegistryPda(): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"registry\")],\n    ROUTER_PROGRAM_ID\n  );\n}\n\n/**\n * Find slab state PDA for a market ID\n * Seeds: [b\"slab\", marketId]\n */\nexport function findSlabStatePda(marketId: PublicKey): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"slab\"), marketId.toBuffer()],\n    SLAB_PROGRAM_ID\n  );\n}\n\n/**\n * Find slab authority PDA for a slab\n * Seeds: [b\"authority\", slab]\n */\nexport function findSlabAuthorityPda(slab: PublicKey): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"authority\"), slab.toBuffer()],\n    SLAB_PROGRAM_ID\n  );\n}\n\n/**\n * Find hold receipt PDA for a hold ID\n * Seeds: [b\"hold\", holdId]\n */\nexport function findHoldPda(holdId: PublicKey): [PublicKey, number] {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"hold\"), holdId.toBuffer()],\n    SLAB_PROGRAM_ID\n  );\n}\n\n/**\n * Find position PDA for trader and instrument\n * Seeds: [b\"position\", trader, slab, instrumentIndex]\n */\nexport function findPositionPda(\n  trader: PublicKey,\n  slab: PublicKey,\n  instrumentIndex: number\n): [PublicKey, number] {\n  const indexBuffer = Buffer.allocUnsafe(2);\n  indexBuffer.writeUInt16LE(instrumentIndex);\n\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"position\"),\n      trader.toBuffer(),\n      slab.toBuffer(),\n      indexBuffer,\n    ],\n    SLAB_PROGRAM_ID\n  );\n}\n","size_bytes":3417}},"version":2}